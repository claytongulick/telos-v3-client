"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ionic_core_dist_esm_ion-segment_2_entry_js"],{

/***/ "../../../node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js":
/*!*************************************************************************!*\
  !*** ../../../node_modules/@ionic/core/dist/esm/ion-segment_2.entry.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ion_segment": () => (/* binding */ Segment),
/* harmony export */   "ion_segment_button": () => (/* binding */ SegmentButton)
/* harmony export */ });
/* harmony import */ var _index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-06cd27b1.js */ "../../../node_modules/@ionic/core/dist/esm/index-06cd27b1.js");
/* harmony import */ var _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ionic-global-a049bcbf.js */ "../../../node_modules/@ionic/core/dist/esm/ionic-global-a049bcbf.js");
/* harmony import */ var _helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers-eed79a2b.js */ "../../../node_modules/@ionic/core/dist/esm/helpers-eed79a2b.js");
/* harmony import */ var _theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./theme-a24ff1ad.js */ "../../../node_modules/@ionic/core/dist/esm/theme-a24ff1ad.js");
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */





const segmentIosCss = ":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.065);border-radius:8px;overflow:hidden;z-index:0}:host(.ion-color){background:rgba(var(--ion-color-base-rgb), 0.065)}:host(.in-toolbar){margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;width:auto}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-toolbar){margin-left:unset;margin-right:unset;-webkit-margin-start:auto;margin-inline-start:auto;-webkit-margin-end:auto;margin-inline-end:auto}}:host(.in-toolbar:not(.ion-color)){background:var(--ion-toolbar-segment-background, var(--background))}:host(.in-toolbar-color:not(.ion-color)){background:rgba(var(--ion-color-contrast-rgb), 0.11)}";

const segmentMdCss = ":host{--ripple-color:currentColor;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;display:-ms-flexbox;display:flex;position:relative;-ms-flex-align:stretch;align-items:stretch;-ms-flex-pack:center;justify-content:center;width:100%;background:var(--background);font-family:var(--ion-font-family, inherit);text-align:center;contain:paint;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}:host(.segment-scrollable){-ms-flex-pack:start;justify-content:start;width:auto;overflow-x:auto}:host(.segment-scrollable::-webkit-scrollbar){display:none}:host{--background:transparent}:host(.segment-scrollable) ::slotted(ion-segment-button){min-width:auto}";

let Segment = class {
  constructor(hostRef) {
    (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.ionChange = (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionChange", 7);
    this.ionSelect = (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionSelect", 7);
    this.ionStyle = (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.e)(this, "ionStyle", 7);
    this.didInit = false;
    this.activated = false;
    /**
     * If `true`, the user cannot interact with the segment.
     */
    this.disabled = false;
    /**
     * If `true`, the segment buttons will overflow and the user can swipe to see them.
     * In addition, this will disable the gesture to drag the indicator between the buttons
     * in order to swipe to see hidden buttons.
     */
    this.scrollable = false;
    /**
     * If `true`, users will be able to swipe between segment buttons to activate them.
     */
    this.swipeGesture = true;
    /**
     * If `true`, navigating to an `ion-segment-button` with the keyboard will focus and select the element.
     * If `false`, keyboard navigation will only focus the `ion-segment-button` element.
     */
    this.selectOnFocus = false;
    this.onClick = (ev) => {
      const current = ev.target;
      const previous = this.checked;
      // If the current element is a segment then that means
      // the user tried to swipe to a segment button and
      // click a segment button at the same time so we should
      // not update the checked segment button
      if (current.tagName === 'ION-SEGMENT') {
        return;
      }
      this.value = current.value;
      if (this.scrollable || !this.swipeGesture) {
        if (previous) {
          this.checkButton(previous, current);
        }
        else {
          this.setCheckedClasses();
        }
      }
      this.checked = current;
    };
    this.getSegmentButton = (selector) => {
      const buttons = this.getButtons().filter(button => !button.disabled);
      const currIndex = buttons.findIndex(button => button === document.activeElement);
      switch (selector) {
        case 'first':
          return buttons[0];
        case 'last':
          return buttons[buttons.length - 1];
        case 'next':
          return buttons[currIndex + 1] || buttons[0];
        case 'previous':
          return buttons[currIndex - 1] || buttons[buttons.length - 1];
        default:
          return null;
      }
    };
  }
  colorChanged(value, oldValue) {
    /**
     * If color is set after not having
     * previously been set (or vice versa),
     * we need to emit style so the segment-buttons
     * can apply their color classes properly.
     */
    if ((oldValue === undefined && value !== undefined) ||
      (oldValue !== undefined && value === undefined)) {
      this.emitStyle();
    }
  }
  swipeGestureChanged() {
    this.gestureChanged();
  }
  valueChanged(value, oldValue) {
    this.ionSelect.emit({ value });
    if (oldValue !== '' || this.didInit) {
      if (!this.activated) {
        this.ionChange.emit({ value });
      }
      else {
        this.valueAfterGesture = value;
      }
    }
  }
  disabledChanged() {
    this.gestureChanged();
    const buttons = this.getButtons();
    for (const button of buttons) {
      button.disabled = this.disabled;
    }
  }
  gestureChanged() {
    if (this.gesture) {
      this.gesture.enable(!this.scrollable && !this.disabled && this.swipeGesture);
    }
  }
  connectedCallback() {
    this.emitStyle();
  }
  componentWillLoad() {
    this.emitStyle();
  }
  async componentDidLoad() {
    this.setCheckedClasses();
    this.ensureFocusable();
    this.gesture = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./index-41bf41f2.js */ "../../../node_modules/@ionic/core/dist/esm/index-41bf41f2.js"))).createGesture({
      el: this.el,
      gestureName: 'segment',
      gesturePriority: 100,
      threshold: 0,
      passive: false,
      onStart: ev => this.onStart(ev),
      onMove: ev => this.onMove(ev),
      onEnd: ev => this.onEnd(ev),
    });
    this.gestureChanged();
    if (this.disabled) {
      this.disabledChanged();
    }
    this.didInit = true;
  }
  onStart(detail) {
    this.activate(detail);
  }
  onMove(detail) {
    this.setNextIndex(detail);
  }
  onEnd(detail) {
    this.setActivated(false);
    const checkedValidButton = this.setNextIndex(detail, true);
    detail.event.stopImmediatePropagation();
    if (checkedValidButton) {
      this.addRipple(detail);
    }
    const value = this.valueAfterGesture;
    if (value !== undefined) {
      this.ionChange.emit({ value });
      this.valueAfterGesture = undefined;
    }
  }
  getButtons() {
    return Array.from(this.el.querySelectorAll('ion-segment-button'));
  }
  /**
   * The gesture blocks the segment button ripple. This
   * function adds the ripple based on the checked segment
   * and where the cursor ended.
   */
  addRipple(detail) {
    const useRippleEffect = _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.c.getBoolean('animated', true) && _ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.c.getBoolean('rippleEffect', true);
    if (!useRippleEffect) {
      return;
    }
    const buttons = this.getButtons();
    const checked = buttons.find(button => button.value === this.value);
    const root = checked.shadowRoot || checked;
    const ripple = root.querySelector('ion-ripple-effect');
    if (!ripple) {
      return;
    }
    const { x, y } = (0,_helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.p)(detail.event);
    ripple.addRipple(x, y).then(remove => remove());
  }
  /*
   * Activate both the segment and the buttons
   * due to a bug with ::slotted in Safari
   */
  setActivated(activated) {
    const buttons = this.getButtons();
    buttons.forEach(button => {
      if (activated) {
        button.classList.add('segment-button-activated');
      }
      else {
        button.classList.remove('segment-button-activated');
      }
    });
    this.activated = activated;
  }
  activate(detail) {
    const clicked = detail.event.target;
    const buttons = this.getButtons();
    const checked = buttons.find(button => button.value === this.value);
    // Make sure we are only checking for activation on a segment button
    // since disabled buttons will get the click on the segment
    if (clicked.tagName !== 'ION-SEGMENT-BUTTON') {
      return;
    }
    // If there are no checked buttons, set the current button to checked
    if (!checked) {
      this.value = clicked.value;
      this.setCheckedClasses();
    }
    // If the gesture began on the clicked button with the indicator
    // then we should activate the indicator
    if (this.value === clicked.value) {
      this.setActivated(true);
    }
  }
  getIndicator(button) {
    const root = button.shadowRoot || button;
    return root.querySelector('.segment-button-indicator');
  }
  checkButton(previous, current) {
    const previousIndicator = this.getIndicator(previous);
    const currentIndicator = this.getIndicator(current);
    if (previousIndicator === null || currentIndicator === null) {
      return;
    }
    const previousClientRect = previousIndicator.getBoundingClientRect();
    const currentClientRect = currentIndicator.getBoundingClientRect();
    const widthDelta = previousClientRect.width / currentClientRect.width;
    const xPosition = previousClientRect.left - currentClientRect.left;
    // Scale the indicator width to match the previous indicator width
    // and translate it on top of the previous indicator
    const transform = `translate3d(${xPosition}px, 0, 0) scaleX(${widthDelta})`;
    (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.c)(() => {
      // Remove the transition before positioning on top of the previous indicator
      currentIndicator.classList.remove('segment-button-indicator-animated');
      currentIndicator.style.setProperty('transform', transform);
      // Force a repaint to ensure the transform happens
      currentIndicator.getBoundingClientRect();
      // Add the transition to move the indicator into place
      currentIndicator.classList.add('segment-button-indicator-animated');
      // Remove the transform to slide the indicator back to the button clicked
      currentIndicator.style.setProperty('transform', '');
    });
    this.value = current.value;
    this.setCheckedClasses();
  }
  setCheckedClasses() {
    const buttons = this.getButtons();
    const index = buttons.findIndex(button => button.value === this.value);
    const next = index + 1;
    // Keep track of the currently checked button
    this.checked = buttons.find(button => button.value === this.value);
    for (const button of buttons) {
      button.classList.remove('segment-button-after-checked');
    }
    if (next < buttons.length) {
      buttons[next].classList.add('segment-button-after-checked');
    }
  }
  setNextIndex(detail, isEnd = false) {
    const isRTL = document.dir === 'rtl';
    const activated = this.activated;
    const buttons = this.getButtons();
    const index = buttons.findIndex(button => button.value === this.value);
    const previous = buttons[index];
    let current;
    let nextIndex;
    if (index === -1) {
      return;
    }
    // Get the element that the touch event started on in case
    // it was the checked button, then we will move the indicator
    const rect = previous.getBoundingClientRect();
    const left = rect.left;
    const width = rect.width;
    // Get the element that the gesture is on top of based on the currentX of the
    // gesture event and the Y coordinate of the starting element, since the gesture
    // can move up and down off of the segment
    const currentX = detail.currentX;
    const previousY = rect.top + (rect.height / 2);
    /**
     * Segment can be used inside the shadow dom
     * so doing document.elementFromPoint would never
     * return a segment button in that instance.
     * We use getRootNode to which will return the parent
     * shadow root if used inside a shadow component and
     * returns document otherwise.
     */
    const root = this.el.getRootNode();
    const nextEl = root.elementFromPoint(currentX, previousY);
    const decreaseIndex = isRTL ? currentX > (left + width) : currentX < left;
    const increaseIndex = isRTL ? currentX < left : currentX > (left + width);
    // If the indicator is currently activated then we have started the gesture
    // on top of the checked button so we need to slide the indicator
    // by checking the button next to it as we move
    if (activated && !isEnd) {
      // Decrease index, move left in LTR & right in RTL
      if (decreaseIndex) {
        const newIndex = index - 1;
        if (newIndex >= 0) {
          nextIndex = newIndex;
        }
        // Increase index, moves right in LTR & left in RTL
      }
      else if (increaseIndex) {
        if (activated && !isEnd) {
          const newIndex = index + 1;
          if (newIndex < buttons.length) {
            nextIndex = newIndex;
          }
        }
      }
      if (nextIndex !== undefined && !buttons[nextIndex].disabled) {
        current = buttons[nextIndex];
      }
    }
    // If the indicator is not activated then we will just set the indicator
    // to the element where the gesture ended
    if (!activated && isEnd) {
      current = nextEl;
    }
    /* tslint:disable-next-line */
    if (current != null) {
      /**
       * If current element is ion-segment then that means
       * user tried to select a disabled ion-segment-button,
       * and we should not update the ripple.
       */
      if (current.tagName === 'ION-SEGMENT') {
        return false;
      }
      if (previous !== current) {
        this.checkButton(previous, current);
      }
    }
    return true;
  }
  emitStyle() {
    this.ionStyle.emit({
      'segment': true
    });
  }
  onKeyDown(ev) {
    const isRTL = document.dir === 'rtl';
    let keyDownSelectsButton = this.selectOnFocus;
    let current;
    switch (ev.key) {
      case 'ArrowRight':
        ev.preventDefault();
        current = isRTL ? this.getSegmentButton('previous') : this.getSegmentButton('next');
        break;
      case 'ArrowLeft':
        ev.preventDefault();
        current = isRTL ? this.getSegmentButton('next') : this.getSegmentButton('previous');
        break;
      case 'Home':
        ev.preventDefault();
        current = this.getSegmentButton('first');
        break;
      case 'End':
        ev.preventDefault();
        current = this.getSegmentButton('last');
        break;
      case ' ':
      case 'Enter':
        ev.preventDefault();
        current = document.activeElement;
        keyDownSelectsButton = true;
    }
    if (!current) {
      return;
    }
    if (keyDownSelectsButton) {
      const previous = this.checked || current;
      this.checkButton(previous, current);
    }
    current.focus();
  }
  /* By default, focus is delegated to the selected `ion-segment-button`.
   * If there is no selected button, focus will instead pass to the first child button.
  **/
  ensureFocusable() {
    var _a;
    if (this.value !== undefined) {
      return;
    }
    const buttons = this.getButtons();
    (_a = buttons[0]) === null || _a === void 0 ? void 0 : _a.setAttribute('tabindex', '0');
  }
  render() {
    const mode = (0,_ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.b)(this);
    return ((0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.H, { role: "tablist", onClick: this.onClick, class: (0,_theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_3__.c)(this.color, {
        [mode]: true,
        'in-toolbar': (0,_theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_3__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_3__.h)('ion-toolbar[color]', this.el),
        'segment-activated': this.activated,
        'segment-disabled': this.disabled,
        'segment-scrollable': this.scrollable
      }) }, (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)));
  }
  get el() { return (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.i)(this); }
  static get watchers() { return {
    "color": ["colorChanged"],
    "swipeGesture": ["swipeGestureChanged"],
    "value": ["valueChanged"],
    "disabled": ["disabledChanged"]
  }; }
};
Segment.style = {
  ios: segmentIosCss,
  md: segmentMdCss
};

const segmentButtonIosCss = ":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none;cursor:pointer}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:var(--margin-start);margin-right:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{margin-left:unset;margin-right:unset;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end)}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;line-height:22px;text-overflow:ellipsis;white-space:nowrap;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:none;--background-hover-opacity:0;--background-focused:none;--background-focused-opacity:0;--border-radius:7px;--border-width:1px;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.12);--border-style:solid;--indicator-box-shadow:0 0 5px rgba(0, 0, 0, 0.16);--indicator-color:var(--ion-color-step-350, var(--ion-background-color, #fff));--indicator-height:100%;--indicator-transition:transform 260ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--transition:100ms all linear;--padding-top:0;--padding-end:13px;--padding-bottom:0;--padding-start:13px;margin-top:2px;margin-bottom:2px;position:relative;-ms-flex-preferred-size:0;flex-basis:0;-ms-flex-direction:row;flex-direction:row;min-width:70px;min-height:28px;-webkit-transform:translate3d(0, 0, 0);transform:translate3d(0, 0, 0);font-size:13px;font-weight:450;line-height:37px}:host::before{margin-left:0;margin-right:0;margin-top:5px;margin-bottom:5px;-webkit-transition:160ms opacity ease-in-out;transition:160ms opacity ease-in-out;-webkit-transition-delay:100ms;transition-delay:100ms;border-left:var(--border-width) var(--border-style) var(--border-color);content:\"\";opacity:1;will-change:opacity}:host(:first-of-type)::before{border-left-color:transparent}:host(.segment-button-disabled){opacity:0.3}::slotted(ion-icon){font-size:24px}:host(.segment-button-layout-icon-start) ::slotted(ion-label){margin-left:2px;margin-right:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.segment-button-layout-icon-start) ::slotted(ion-label){margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:0;margin-inline-end:0}}:host(.segment-button-layout-icon-end) ::slotted(ion-label){margin-left:0;margin-right:2px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.segment-button-layout-icon-end) ::slotted(ion-label){margin-left:unset;margin-right:unset;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:2px;margin-inline-end:2px}}.segment-button-indicator{padding-left:2px;padding-right:2px;left:0;right:0;top:0;bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.segment-button-indicator{padding-left:unset;padding-right:unset;-webkit-padding-start:2px;padding-inline-start:2px;-webkit-padding-end:2px;padding-inline-end:2px}}.segment-button-indicator-background{border-radius:var(--border-radius);background:var(--indicator-color)}.segment-button-indicator-background{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked)::before,:host(.segment-button-after-checked)::before{opacity:0}:host(.segment-button-checked){z-index:-1}:host(.segment-button-activated){--indicator-transform:scale(0.95)}:host(.ion-focused) .button-native{opacity:0.7}@media (any-hover: hover){:host(:hover) .button-native{opacity:0.5}:host(.segment-button-checked:hover) .button-native{opacity:1}}:host(.in-segment-color){background:none;color:var(--ion-text-color, #000)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-step-350, var(--ion-background-color, #fff))}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native,:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-text-color, #000)}}:host(.in-toolbar:not(.in-segment-color)){--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, var(--ion-toolbar-color), initial);--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-toolbar-color), initial);--indicator-color:var(--ion-toolbar-segment-indicator-color, var(--ion-color-step-350, var(--ion-background-color, #fff)))}:host(.in-toolbar-color) .segment-button-indicator-background{background:#fff}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-base)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color):hover) .button-native{color:var(--ion-color-contrast)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color):hover) .button-native{color:var(--ion-color-base)}}";

const segmentButtonMdCss = ":host{--color:initial;--color-hover:var(--color);--color-checked:var(--color);--color-disabled:var(--color);--padding-start:0;--padding-end:0;--padding-top:0;--padding-bottom:0;border-radius:var(--border-radius);display:-ms-flexbox;display:flex;position:relative;-ms-flex:1 1 auto;flex:1 1 auto;-ms-flex-direction:column;flex-direction:column;height:auto;background:var(--background);color:var(--color);text-decoration:none;text-overflow:ellipsis;white-space:nowrap;-webkit-font-kerning:none;font-kerning:none;cursor:pointer}.button-native{border-radius:0;font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;margin-left:var(--margin-start);margin-right:var(--margin-end);margin-top:var(--margin-top);margin-bottom:var(--margin-bottom);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0);display:-ms-flexbox;display:flex;position:relative;-ms-flex-direction:inherit;flex-direction:inherit;-ms-flex-positive:1;flex-grow:1;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;min-width:inherit;max-width:inherit;height:auto;min-height:inherit;max-height:inherit;-webkit-transition:var(--transition);transition:var(--transition);border:none;outline:none;background:transparent;contain:content;pointer-events:none;overflow:hidden;z-index:2}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{margin-left:unset;margin-right:unset;-webkit-margin-start:var(--margin-start);margin-inline-start:var(--margin-start);-webkit-margin-end:var(--margin-end);margin-inline-end:var(--margin-end)}}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.button-native{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.button-native::after{left:0;right:0;top:0;bottom:0;position:absolute;content:\"\";opacity:0}.button-inner{display:-ms-flexbox;display:flex;position:relative;-ms-flex-flow:inherit;flex-flow:inherit;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;width:100%;height:100%;z-index:1}:host(.segment-button-checked){background:var(--background-checked);color:var(--color-checked)}:host(.segment-button-disabled){cursor:default;pointer-events:none}:host(.ion-focused) .button-native{color:var(--color-focused)}:host(.ion-focused) .button-native::after{background:var(--background-focused);opacity:var(--background-focused-opacity)}:host(:focus){outline:none}@media (any-hover: hover){:host(:hover) .button-native{color:var(--color-hover)}:host(:hover) .button-native::after{background:var(--background-hover);opacity:var(--background-hover-opacity)}:host(.segment-button-checked:hover) .button-native{color:var(--color-checked)}}::slotted(ion-icon){-ms-flex-negative:0;flex-shrink:0;-ms-flex-order:-1;order:-1;pointer-events:none}::slotted(ion-label){display:block;-ms-flex-item-align:center;align-self:center;line-height:22px;text-overflow:ellipsis;white-space:nowrap;-webkit-box-sizing:border-box;box-sizing:border-box;pointer-events:none}:host(.segment-button-layout-icon-top) .button-native{-ms-flex-direction:column;flex-direction:column}:host(.segment-button-layout-icon-start) .button-native{-ms-flex-direction:row;flex-direction:row}:host(.segment-button-layout-icon-end) .button-native{-ms-flex-direction:row-reverse;flex-direction:row-reverse}:host(.segment-button-layout-icon-bottom) .button-native{-ms-flex-direction:column-reverse;flex-direction:column-reverse}:host(.segment-button-layout-icon-hide) ::slotted(ion-icon){display:none}:host(.segment-button-layout-label-hide) ::slotted(ion-label){display:none}ion-ripple-effect{color:var(--ripple-color, var(--color-checked))}.segment-button-indicator{-webkit-transform-origin:left;transform-origin:left;position:absolute;opacity:0;-webkit-box-sizing:border-box;box-sizing:border-box;will-change:transform, opacity;pointer-events:none}.segment-button-indicator-background{width:100%;height:var(--indicator-height);-webkit-transform:var(--indicator-transform);transform:var(--indicator-transform);-webkit-box-shadow:var(--indicator-box-shadow);box-shadow:var(--indicator-box-shadow);pointer-events:none}.segment-button-indicator-animated{-webkit-transition:var(--indicator-transition);transition:var(--indicator-transition)}:host(.segment-button-checked) .segment-button-indicator{opacity:1}@media (prefers-reduced-motion: reduce){.segment-button-indicator-background{-webkit-transform:none;transform:none}.segment-button-indicator-animated{-webkit-transition:none;transition:none}}:host{--background:none;--background-checked:none;--background-hover:var(--color-checked);--background-focused:var(--color-checked);--background-activated-opacity:0;--background-focused-opacity:.12;--background-hover-opacity:.04;--color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6);--color-checked:var(--ion-color-primary, #3880ff);--indicator-box-shadow:none;--indicator-color:var(--color-checked);--indicator-height:2px;--indicator-transition:transform 250ms cubic-bezier(0.4, 0, 0.2, 1);--indicator-transform:none;--padding-top:0;--padding-end:16px;--padding-bottom:0;--padding-start:16px;--transition:color 0.15s linear 0s, opacity 0.15s linear 0s;min-width:90px;max-width:360px;min-height:48px;border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);font-size:14px;font-weight:500;letter-spacing:0.06em;line-height:40px;text-transform:uppercase}:host(.segment-button-disabled){opacity:0.3}:host(.in-segment-color){background:none;color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color) ion-ripple-effect{color:var(--ion-color-base)}:host(.in-segment-color) .segment-button-indicator-background{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked) .button-native{color:var(--ion-color-base)}:host(.in-segment-color.ion-focused) .button-native::after{background:var(--ion-color-base)}@media (any-hover: hover){:host(.in-segment-color:hover) .button-native{color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6)}:host(.in-segment-color:hover) .button-native::after{background:var(--ion-color-base)}:host(.in-segment-color.segment-button-checked:hover) .button-native{color:var(--ion-color-base)}}:host(.in-toolbar:not(.in-segment-color)){--background:var(--ion-toolbar-segment-background, none);--background-checked:var(--ion-toolbar-segment-background-checked, none);--color:var(--ion-toolbar-segment-color, rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.6));--color-checked:var(--ion-toolbar-segment-color-checked, var(--ion-color-primary, #3880ff));--indicator-color:var(--ion-toolbar-segment-color-checked, var(--color-checked))}:host(.in-toolbar-color:not(.in-segment-color)) .button-native{color:rgba(var(--ion-color-contrast-rgb), 0.6)}:host(.in-toolbar-color.segment-button-checked:not(.in-segment-color)) .button-native{color:var(--ion-color-contrast)}@media (any-hover: hover){:host(.in-toolbar-color:not(.in-segment-color)) .button-native::after{background:var(--ion-color-contrast)}}::slotted(ion-icon){margin-top:12px;margin-bottom:12px;font-size:24px}::slotted(ion-label){margin-top:12px;margin-bottom:12px}:host(.segment-button-layout-icon-top) ::slotted(ion-label),:host(.segment-button-layout-icon-bottom) ::slotted(ion-icon){margin-top:0}:host(.segment-button-layout-icon-top) ::slotted(ion-icon),:host(.segment-button-layout-icon-bottom) ::slotted(ion-label){margin-bottom:0}:host(.segment-button-layout-icon-start) ::slotted(ion-label){margin-left:8px;margin-right:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.segment-button-layout-icon-start) ::slotted(ion-label){margin-left:unset;margin-right:unset;-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:0;margin-inline-end:0}}:host(.segment-button-layout-icon-end) ::slotted(ion-label){margin-left:0;margin-right:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.segment-button-layout-icon-end) ::slotted(ion-label){margin-left:unset;margin-right:unset;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}}:host(.segment-button-has-icon-only) ::slotted(ion-icon){margin-top:12px;margin-bottom:12px}:host(.segment-button-has-label-only) ::slotted(ion-label){margin-top:12px;margin-bottom:12px}.segment-button-indicator{left:0;right:0;bottom:0}.segment-button-indicator-background{background:var(--indicator-color)}:host(.in-toolbar:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-toolbar-segment-indicator-color, var(--indicator-color))}:host(.in-toolbar-color:not(.in-segment-color)) .segment-button-indicator-background{background:var(--ion-color-contrast)}";

let ids = 0;
let SegmentButton = class {
  constructor(hostRef) {
    (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.r)(this, hostRef);
    this.segmentEl = null;
    this.checked = false;
    /**
     * If `true`, the user cannot interact with the segment button.
     */
    this.disabled = false;
    /**
     * Set the layout of the text and icon in the segment.
     */
    this.layout = 'icon-top';
    /**
     * The type of the button.
     */
    this.type = 'button';
    /**
     * The value of the segment button.
     */
    this.value = 'ion-sb-' + (ids++);
    this.updateStyle = () => {
      (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.j)(this);
    };
    this.updateState = () => {
      if (this.segmentEl) {
        this.checked = this.segmentEl.value === this.value;
      }
    };
  }
  connectedCallback() {
    const segmentEl = this.segmentEl = this.el.closest('ion-segment');
    if (segmentEl) {
      this.updateState();
      (0,_helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.a)(segmentEl, 'ionSelect', this.updateState);
      (0,_helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.a)(segmentEl, 'ionStyle', this.updateStyle);
    }
  }
  disconnectedCallback() {
    const segmentEl = this.segmentEl;
    if (segmentEl) {
      (0,_helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.b)(segmentEl, 'ionSelect', this.updateState);
      (0,_helpers_eed79a2b_js__WEBPACK_IMPORTED_MODULE_2__.b)(segmentEl, 'ionStyle', this.updateStyle);
      this.segmentEl = null;
    }
  }
  get hasLabel() {
    return !!this.el.querySelector('ion-label');
  }
  get hasIcon() {
    return !!this.el.querySelector('ion-icon');
  }
  get tabIndex() {
    return this.checked && !this.disabled ? 0 : -1;
  }
  render() {
    const { checked, type, disabled, hasIcon, hasLabel, layout, segmentEl, tabIndex } = this;
    const mode = (0,_ionic_global_a049bcbf_js__WEBPACK_IMPORTED_MODULE_1__.b)(this);
    const hasSegmentColor = () => segmentEl !== null && segmentEl.color !== undefined;
    return ((0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)(_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.H, { role: "tab", "aria-selected": checked ? 'true' : 'false', "aria-disabled": disabled ? 'true' : null, tabIndex: tabIndex, class: {
        [mode]: true,
        'in-toolbar': (0,_theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_3__.h)('ion-toolbar', this.el),
        'in-toolbar-color': (0,_theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_3__.h)('ion-toolbar[color]', this.el),
        'in-segment': (0,_theme_a24ff1ad_js__WEBPACK_IMPORTED_MODULE_3__.h)('ion-segment', this.el),
        'in-segment-color': hasSegmentColor(),
        'segment-button-has-label': hasLabel,
        'segment-button-has-icon': hasIcon,
        'segment-button-has-label-only': hasLabel && !hasIcon,
        'segment-button-has-icon-only': hasIcon && !hasLabel,
        'segment-button-disabled': disabled,
        'segment-button-checked': checked,
        [`segment-button-layout-${layout}`]: true,
        'ion-activatable': true,
        'ion-activatable-instant': true,
        'ion-focusable': true,
      } }, (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("button", { type: type, tabIndex: -1, class: "button-native", part: "native", disabled: disabled }, (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("span", { class: "button-inner" }, (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("slot", null)), mode === 'md' && (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("ion-ripple-effect", null)), (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { part: "indicator", class: {
        'segment-button-indicator': true,
        'segment-button-indicator-animated': true
      } }, (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.h)("div", { part: "indicator-background", class: "segment-button-indicator-background" }))));
  }
  get el() { return (0,_index_06cd27b1_js__WEBPACK_IMPORTED_MODULE_0__.i)(this); }
};
SegmentButton.style = {
  ios: segmentButtonIosCss,
  md: segmentButtonMdCss
};




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2h1bmtzL3ZlbmRvcnMtbm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfZGlzdF9lc21faW9uLXNlZ21lbnRfMl9lbnRyeV9qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDK0k7QUFDckU7QUFDaUM7QUFDM0I7O0FBRWhGLDZCQUE2Qiw0QkFBNEIsa0NBQWtDLG1DQUFtQyxvQkFBb0IsYUFBYSxrQkFBa0IsdUJBQXVCLG9CQUFvQixxQkFBcUIsdUJBQXVCLFdBQVcsNkJBQTZCLDRDQUE0QyxrQkFBa0IsY0FBYyx5QkFBeUIsc0JBQXNCLHFCQUFxQixpQkFBaUIsMkJBQTJCLG9CQUFvQixzQkFBc0IsV0FBVyxnQkFBZ0IsOENBQThDLGFBQWEsTUFBTSw2REFBNkQsa0JBQWtCLGdCQUFnQixVQUFVLGtCQUFrQixrREFBa0QsbUJBQW1CLGlCQUFpQixrQkFBa0IsYUFBYSxnQkFBZ0IsV0FBVywrRkFBK0YsbUJBQW1CLGtCQUFrQixtQkFBbUIsMEJBQTBCLHlCQUF5Qix3QkFBd0Isd0JBQXdCLG1DQUFtQyxvRUFBb0UseUNBQXlDLHFEQUFxRDs7QUFFNXpDLDRCQUE0Qiw0QkFBNEIsa0NBQWtDLG1DQUFtQyxvQkFBb0IsYUFBYSxrQkFBa0IsdUJBQXVCLG9CQUFvQixxQkFBcUIsdUJBQXVCLFdBQVcsNkJBQTZCLDRDQUE0QyxrQkFBa0IsY0FBYyx5QkFBeUIsc0JBQXNCLHFCQUFxQixpQkFBaUIsMkJBQTJCLG9CQUFvQixzQkFBc0IsV0FBVyxnQkFBZ0IsOENBQThDLGFBQWEsTUFBTSx5QkFBeUIseURBQXlELGVBQWU7O0FBRWx0QjtBQUNBO0FBQ0EsSUFBSSxxREFBZ0I7QUFDcEIscUJBQXFCLHFEQUFXO0FBQ2hDLHFCQUFxQixxREFBVztBQUNoQyxvQkFBb0IscURBQVc7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLE9BQU87QUFDakM7QUFDQTtBQUNBLDhCQUE4QixPQUFPO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiwrS0FBNkI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUVBQWlCLHNCQUFzQixtRUFBaUI7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU8sRUFBRSx1REFBWTtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxVQUFVLG1CQUFtQixXQUFXO0FBQzdFLElBQUkscURBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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T0FBTyxxREFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUV1RSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQGlvbmljL2NvcmUvZGlzdC9lc20vaW9uLXNlZ21lbnRfMi5lbnRyeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIChDKSBJb25pYyBodHRwOi8vaW9uaWNmcmFtZXdvcmsuY29tIC0gTUlUIExpY2Vuc2VcbiAqL1xuaW1wb3J0IHsgciBhcyByZWdpc3Rlckluc3RhbmNlLCBlIGFzIGNyZWF0ZUV2ZW50LCBjIGFzIHdyaXRlVGFzaywgaCwgSCBhcyBIb3N0LCBpIGFzIGdldEVsZW1lbnQsIGogYXMgZm9yY2VVcGRhdGUgfSBmcm9tICcuL2luZGV4LTA2Y2QyN2IxLmpzJztcbmltcG9ydCB7IGMgYXMgY29uZmlnLCBiIGFzIGdldElvbk1vZGUgfSBmcm9tICcuL2lvbmljLWdsb2JhbC1hMDQ5YmNiZi5qcyc7XG5pbXBvcnQgeyBwIGFzIHBvaW50ZXJDb29yZCwgYSBhcyBhZGRFdmVudExpc3RlbmVyLCBiIGFzIHJlbW92ZUV2ZW50TGlzdGVuZXIgfSBmcm9tICcuL2hlbHBlcnMtZWVkNzlhMmIuanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVDb2xvckNsYXNzZXMsIGggYXMgaG9zdENvbnRleHQgfSBmcm9tICcuL3RoZW1lLWEyNGZmMWFkLmpzJztcblxuY29uc3Qgc2VnbWVudElvc0NzcyA9IFwiOmhvc3R7LS1yaXBwbGUtY29sb3I6Y3VycmVudENvbG9yOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWFsaWduOnN0cmV0Y2g7YWxpZ24taXRlbXM6c3RyZXRjaDstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtmb250LWZhbWlseTp2YXIoLS1pb24tZm9udC1mYW1pbHksIGluaGVyaXQpO3RleHQtYWxpZ246Y2VudGVyO2NvbnRhaW46cGFpbnQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGUpey1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OnN0YXJ0O3dpZHRoOmF1dG87b3ZlcmZsb3cteDphdXRvfTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGU6Oi13ZWJraXQtc2Nyb2xsYmFyKXtkaXNwbGF5Om5vbmV9Omhvc3R7LS1iYWNrZ3JvdW5kOnJnYmEodmFyKC0taW9uLXRleHQtY29sb3ItcmdiLCAwLCAwLCAwKSwgMC4wNjUpO2JvcmRlci1yYWRpdXM6OHB4O292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjB9Omhvc3QoLmlvbi1jb2xvcil7YmFja2dyb3VuZDpyZ2JhKHZhcigtLWlvbi1jb2xvci1iYXNlLXJnYiksIDAuMDY1KX06aG9zdCguaW4tdG9vbGJhcil7bWFyZ2luLWxlZnQ6YXV0bzttYXJnaW4tcmlnaHQ6YXV0bzttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO3dpZHRoOmF1dG99QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCguaW4tdG9vbGJhcil7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OmF1dG87bWFyZ2luLWlubGluZS1zdGFydDphdXRvOy13ZWJraXQtbWFyZ2luLWVuZDphdXRvO21hcmdpbi1pbmxpbmUtZW5kOmF1dG99fTpob3N0KC5pbi10b29sYmFyOm5vdCguaW9uLWNvbG9yKSl7YmFja2dyb3VuZDp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWJhY2tncm91bmQsIHZhcigtLWJhY2tncm91bmQpKX06aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmlvbi1jb2xvcikpe2JhY2tncm91bmQ6cmdiYSh2YXIoLS1pb24tY29sb3ItY29udHJhc3QtcmdiKSwgMC4xMSl9XCI7XG5cbmNvbnN0IHNlZ21lbnRNZENzcyA9IFwiOmhvc3R7LS1yaXBwbGUtY29sb3I6Y3VycmVudENvbG9yOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWFsaWduOnN0cmV0Y2g7YWxpZ24taXRlbXM6c3RyZXRjaDstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kKTtmb250LWZhbWlseTp2YXIoLS1pb24tZm9udC1mYW1pbHksIGluaGVyaXQpO3RleHQtYWxpZ246Y2VudGVyO2NvbnRhaW46cGFpbnQ7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGUpey1tcy1mbGV4LXBhY2s6c3RhcnQ7anVzdGlmeS1jb250ZW50OnN0YXJ0O3dpZHRoOmF1dG87b3ZlcmZsb3cteDphdXRvfTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGU6Oi13ZWJraXQtc2Nyb2xsYmFyKXtkaXNwbGF5Om5vbmV9Omhvc3R7LS1iYWNrZ3JvdW5kOnRyYW5zcGFyZW50fTpob3N0KC5zZWdtZW50LXNjcm9sbGFibGUpIDo6c2xvdHRlZChpb24tc2VnbWVudC1idXR0b24pe21pbi13aWR0aDphdXRvfVwiO1xuXG5sZXQgU2VnbWVudCA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5pb25DaGFuZ2UgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvbkNoYW5nZVwiLCA3KTtcbiAgICB0aGlzLmlvblNlbGVjdCA9IGNyZWF0ZUV2ZW50KHRoaXMsIFwiaW9uU2VsZWN0XCIsIDcpO1xuICAgIHRoaXMuaW9uU3R5bGUgPSBjcmVhdGVFdmVudCh0aGlzLCBcImlvblN0eWxlXCIsIDcpO1xuICAgIHRoaXMuZGlkSW5pdCA9IGZhbHNlO1xuICAgIHRoaXMuYWN0aXZhdGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgdXNlciBjYW5ub3QgaW50ZXJhY3Qgd2l0aCB0aGUgc2VnbWVudC5cbiAgICAgKi9cbiAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB0aGUgc2VnbWVudCBidXR0b25zIHdpbGwgb3ZlcmZsb3cgYW5kIHRoZSB1c2VyIGNhbiBzd2lwZSB0byBzZWUgdGhlbS5cbiAgICAgKiBJbiBhZGRpdGlvbiwgdGhpcyB3aWxsIGRpc2FibGUgdGhlIGdlc3R1cmUgdG8gZHJhZyB0aGUgaW5kaWNhdG9yIGJldHdlZW4gdGhlIGJ1dHRvbnNcbiAgICAgKiBpbiBvcmRlciB0byBzd2lwZSB0byBzZWUgaGlkZGVuIGJ1dHRvbnMuXG4gICAgICovXG4gICAgdGhpcy5zY3JvbGxhYmxlID0gZmFsc2U7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCB1c2VycyB3aWxsIGJlIGFibGUgdG8gc3dpcGUgYmV0d2VlbiBzZWdtZW50IGJ1dHRvbnMgdG8gYWN0aXZhdGUgdGhlbS5cbiAgICAgKi9cbiAgICB0aGlzLnN3aXBlR2VzdHVyZSA9IHRydWU7XG4gICAgLyoqXG4gICAgICogSWYgYHRydWVgLCBuYXZpZ2F0aW5nIHRvIGFuIGBpb24tc2VnbWVudC1idXR0b25gIHdpdGggdGhlIGtleWJvYXJkIHdpbGwgZm9jdXMgYW5kIHNlbGVjdCB0aGUgZWxlbWVudC5cbiAgICAgKiBJZiBgZmFsc2VgLCBrZXlib2FyZCBuYXZpZ2F0aW9uIHdpbGwgb25seSBmb2N1cyB0aGUgYGlvbi1zZWdtZW50LWJ1dHRvbmAgZWxlbWVudC5cbiAgICAgKi9cbiAgICB0aGlzLnNlbGVjdE9uRm9jdXMgPSBmYWxzZTtcbiAgICB0aGlzLm9uQ2xpY2sgPSAoZXYpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnQgPSBldi50YXJnZXQ7XG4gICAgICBjb25zdCBwcmV2aW91cyA9IHRoaXMuY2hlY2tlZDtcbiAgICAgIC8vIElmIHRoZSBjdXJyZW50IGVsZW1lbnQgaXMgYSBzZWdtZW50IHRoZW4gdGhhdCBtZWFuc1xuICAgICAgLy8gdGhlIHVzZXIgdHJpZWQgdG8gc3dpcGUgdG8gYSBzZWdtZW50IGJ1dHRvbiBhbmRcbiAgICAgIC8vIGNsaWNrIGEgc2VnbWVudCBidXR0b24gYXQgdGhlIHNhbWUgdGltZSBzbyB3ZSBzaG91bGRcbiAgICAgIC8vIG5vdCB1cGRhdGUgdGhlIGNoZWNrZWQgc2VnbWVudCBidXR0b25cbiAgICAgIGlmIChjdXJyZW50LnRhZ05hbWUgPT09ICdJT04tU0VHTUVOVCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy52YWx1ZSA9IGN1cnJlbnQudmFsdWU7XG4gICAgICBpZiAodGhpcy5zY3JvbGxhYmxlIHx8ICF0aGlzLnN3aXBlR2VzdHVyZSkge1xuICAgICAgICBpZiAocHJldmlvdXMpIHtcbiAgICAgICAgICB0aGlzLmNoZWNrQnV0dG9uKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldENoZWNrZWRDbGFzc2VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuY2hlY2tlZCA9IGN1cnJlbnQ7XG4gICAgfTtcbiAgICB0aGlzLmdldFNlZ21lbnRCdXR0b24gPSAoc2VsZWN0b3IpID0+IHtcbiAgICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKS5maWx0ZXIoYnV0dG9uID0+ICFidXR0b24uZGlzYWJsZWQpO1xuICAgICAgY29uc3QgY3VyckluZGV4ID0gYnV0dG9ucy5maW5kSW5kZXgoYnV0dG9uID0+IGJ1dHRvbiA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICBzd2l0Y2ggKHNlbGVjdG9yKSB7XG4gICAgICAgIGNhc2UgJ2ZpcnN0JzpcbiAgICAgICAgICByZXR1cm4gYnV0dG9uc1swXTtcbiAgICAgICAgY2FzZSAnbGFzdCc6XG4gICAgICAgICAgcmV0dXJuIGJ1dHRvbnNbYnV0dG9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgY2FzZSAnbmV4dCc6XG4gICAgICAgICAgcmV0dXJuIGJ1dHRvbnNbY3VyckluZGV4ICsgMV0gfHwgYnV0dG9uc1swXTtcbiAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgIHJldHVybiBidXR0b25zW2N1cnJJbmRleCAtIDFdIHx8IGJ1dHRvbnNbYnV0dG9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIGNvbG9yQ2hhbmdlZCh2YWx1ZSwgb2xkVmFsdWUpIHtcbiAgICAvKipcbiAgICAgKiBJZiBjb2xvciBpcyBzZXQgYWZ0ZXIgbm90IGhhdmluZ1xuICAgICAqIHByZXZpb3VzbHkgYmVlbiBzZXQgKG9yIHZpY2UgdmVyc2EpLFxuICAgICAqIHdlIG5lZWQgdG8gZW1pdCBzdHlsZSBzbyB0aGUgc2VnbWVudC1idXR0b25zXG4gICAgICogY2FuIGFwcGx5IHRoZWlyIGNvbG9yIGNsYXNzZXMgcHJvcGVybHkuXG4gICAgICovXG4gICAgaWYgKChvbGRWYWx1ZSA9PT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSB1bmRlZmluZWQpIHx8XG4gICAgICAob2xkVmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgdGhpcy5lbWl0U3R5bGUoKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVHZXN0dXJlQ2hhbmdlZCgpIHtcbiAgICB0aGlzLmdlc3R1cmVDaGFuZ2VkKCk7XG4gIH1cbiAgdmFsdWVDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIHRoaXMuaW9uU2VsZWN0LmVtaXQoeyB2YWx1ZSB9KTtcbiAgICBpZiAob2xkVmFsdWUgIT09ICcnIHx8IHRoaXMuZGlkSW5pdCkge1xuICAgICAgaWYgKCF0aGlzLmFjdGl2YXRlZCkge1xuICAgICAgICB0aGlzLmlvbkNoYW5nZS5lbWl0KHsgdmFsdWUgfSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdGhpcy52YWx1ZUFmdGVyR2VzdHVyZSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBkaXNhYmxlZENoYW5nZWQoKSB7XG4gICAgdGhpcy5nZXN0dXJlQ2hhbmdlZCgpO1xuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICBmb3IgKGNvbnN0IGJ1dHRvbiBvZiBidXR0b25zKSB7XG4gICAgICBidXR0b24uZGlzYWJsZWQgPSB0aGlzLmRpc2FibGVkO1xuICAgIH1cbiAgfVxuICBnZXN0dXJlQ2hhbmdlZCgpIHtcbiAgICBpZiAodGhpcy5nZXN0dXJlKSB7XG4gICAgICB0aGlzLmdlc3R1cmUuZW5hYmxlKCF0aGlzLnNjcm9sbGFibGUgJiYgIXRoaXMuZGlzYWJsZWQgJiYgdGhpcy5zd2lwZUdlc3R1cmUpO1xuICAgIH1cbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICB0aGlzLmVtaXRTdHlsZSgpO1xuICB9XG4gIGNvbXBvbmVudFdpbGxMb2FkKCkge1xuICAgIHRoaXMuZW1pdFN0eWxlKCk7XG4gIH1cbiAgYXN5bmMgY29tcG9uZW50RGlkTG9hZCgpIHtcbiAgICB0aGlzLnNldENoZWNrZWRDbGFzc2VzKCk7XG4gICAgdGhpcy5lbnN1cmVGb2N1c2FibGUoKTtcbiAgICB0aGlzLmdlc3R1cmUgPSAoYXdhaXQgaW1wb3J0KCcuL2luZGV4LTQxYmY0MWYyLmpzJykpLmNyZWF0ZUdlc3R1cmUoe1xuICAgICAgZWw6IHRoaXMuZWwsXG4gICAgICBnZXN0dXJlTmFtZTogJ3NlZ21lbnQnLFxuICAgICAgZ2VzdHVyZVByaW9yaXR5OiAxMDAsXG4gICAgICB0aHJlc2hvbGQ6IDAsXG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIG9uU3RhcnQ6IGV2ID0+IHRoaXMub25TdGFydChldiksXG4gICAgICBvbk1vdmU6IGV2ID0+IHRoaXMub25Nb3ZlKGV2KSxcbiAgICAgIG9uRW5kOiBldiA9PiB0aGlzLm9uRW5kKGV2KSxcbiAgICB9KTtcbiAgICB0aGlzLmdlc3R1cmVDaGFuZ2VkKCk7XG4gICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuZGlzYWJsZWRDaGFuZ2VkKCk7XG4gICAgfVxuICAgIHRoaXMuZGlkSW5pdCA9IHRydWU7XG4gIH1cbiAgb25TdGFydChkZXRhaWwpIHtcbiAgICB0aGlzLmFjdGl2YXRlKGRldGFpbCk7XG4gIH1cbiAgb25Nb3ZlKGRldGFpbCkge1xuICAgIHRoaXMuc2V0TmV4dEluZGV4KGRldGFpbCk7XG4gIH1cbiAgb25FbmQoZGV0YWlsKSB7XG4gICAgdGhpcy5zZXRBY3RpdmF0ZWQoZmFsc2UpO1xuICAgIGNvbnN0IGNoZWNrZWRWYWxpZEJ1dHRvbiA9IHRoaXMuc2V0TmV4dEluZGV4KGRldGFpbCwgdHJ1ZSk7XG4gICAgZGV0YWlsLmV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIGlmIChjaGVja2VkVmFsaWRCdXR0b24pIHtcbiAgICAgIHRoaXMuYWRkUmlwcGxlKGRldGFpbCk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZUFmdGVyR2VzdHVyZTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5pb25DaGFuZ2UuZW1pdCh7IHZhbHVlIH0pO1xuICAgICAgdGhpcy52YWx1ZUFmdGVyR2VzdHVyZSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgZ2V0QnV0dG9ucygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lvbi1zZWdtZW50LWJ1dHRvbicpKTtcbiAgfVxuICAvKipcbiAgICogVGhlIGdlc3R1cmUgYmxvY2tzIHRoZSBzZWdtZW50IGJ1dHRvbiByaXBwbGUuIFRoaXNcbiAgICogZnVuY3Rpb24gYWRkcyB0aGUgcmlwcGxlIGJhc2VkIG9uIHRoZSBjaGVja2VkIHNlZ21lbnRcbiAgICogYW5kIHdoZXJlIHRoZSBjdXJzb3IgZW5kZWQuXG4gICAqL1xuICBhZGRSaXBwbGUoZGV0YWlsKSB7XG4gICAgY29uc3QgdXNlUmlwcGxlRWZmZWN0ID0gY29uZmlnLmdldEJvb2xlYW4oJ2FuaW1hdGVkJywgdHJ1ZSkgJiYgY29uZmlnLmdldEJvb2xlYW4oJ3JpcHBsZUVmZmVjdCcsIHRydWUpO1xuICAgIGlmICghdXNlUmlwcGxlRWZmZWN0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICBjb25zdCBjaGVja2VkID0gYnV0dG9ucy5maW5kKGJ1dHRvbiA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgIGNvbnN0IHJvb3QgPSBjaGVja2VkLnNoYWRvd1Jvb3QgfHwgY2hlY2tlZDtcbiAgICBjb25zdCByaXBwbGUgPSByb290LnF1ZXJ5U2VsZWN0b3IoJ2lvbi1yaXBwbGUtZWZmZWN0Jyk7XG4gICAgaWYgKCFyaXBwbGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgeyB4LCB5IH0gPSBwb2ludGVyQ29vcmQoZGV0YWlsLmV2ZW50KTtcbiAgICByaXBwbGUuYWRkUmlwcGxlKHgsIHkpLnRoZW4ocmVtb3ZlID0+IHJlbW92ZSgpKTtcbiAgfVxuICAvKlxuICAgKiBBY3RpdmF0ZSBib3RoIHRoZSBzZWdtZW50IGFuZCB0aGUgYnV0dG9uc1xuICAgKiBkdWUgdG8gYSBidWcgd2l0aCA6OnNsb3R0ZWQgaW4gU2FmYXJpXG4gICAqL1xuICBzZXRBY3RpdmF0ZWQoYWN0aXZhdGVkKSB7XG4gICAgY29uc3QgYnV0dG9ucyA9IHRoaXMuZ2V0QnV0dG9ucygpO1xuICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgaWYgKGFjdGl2YXRlZCkge1xuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnc2VnbWVudC1idXR0b24tYWN0aXZhdGVkJyk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3NlZ21lbnQtYnV0dG9uLWFjdGl2YXRlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuYWN0aXZhdGVkID0gYWN0aXZhdGVkO1xuICB9XG4gIGFjdGl2YXRlKGRldGFpbCkge1xuICAgIGNvbnN0IGNsaWNrZWQgPSBkZXRhaWwuZXZlbnQudGFyZ2V0O1xuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICBjb25zdCBjaGVja2VkID0gYnV0dG9ucy5maW5kKGJ1dHRvbiA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgIC8vIE1ha2Ugc3VyZSB3ZSBhcmUgb25seSBjaGVja2luZyBmb3IgYWN0aXZhdGlvbiBvbiBhIHNlZ21lbnQgYnV0dG9uXG4gICAgLy8gc2luY2UgZGlzYWJsZWQgYnV0dG9ucyB3aWxsIGdldCB0aGUgY2xpY2sgb24gdGhlIHNlZ21lbnRcbiAgICBpZiAoY2xpY2tlZC50YWdOYW1lICE9PSAnSU9OLVNFR01FTlQtQlVUVE9OJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB0aGVyZSBhcmUgbm8gY2hlY2tlZCBidXR0b25zLCBzZXQgdGhlIGN1cnJlbnQgYnV0dG9uIHRvIGNoZWNrZWRcbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgIHRoaXMudmFsdWUgPSBjbGlja2VkLnZhbHVlO1xuICAgICAgdGhpcy5zZXRDaGVja2VkQ2xhc3NlcygpO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgZ2VzdHVyZSBiZWdhbiBvbiB0aGUgY2xpY2tlZCBidXR0b24gd2l0aCB0aGUgaW5kaWNhdG9yXG4gICAgLy8gdGhlbiB3ZSBzaG91bGQgYWN0aXZhdGUgdGhlIGluZGljYXRvclxuICAgIGlmICh0aGlzLnZhbHVlID09PSBjbGlja2VkLnZhbHVlKSB7XG4gICAgICB0aGlzLnNldEFjdGl2YXRlZCh0cnVlKTtcbiAgICB9XG4gIH1cbiAgZ2V0SW5kaWNhdG9yKGJ1dHRvbikge1xuICAgIGNvbnN0IHJvb3QgPSBidXR0b24uc2hhZG93Um9vdCB8fCBidXR0b247XG4gICAgcmV0dXJuIHJvb3QucXVlcnlTZWxlY3RvcignLnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcicpO1xuICB9XG4gIGNoZWNrQnV0dG9uKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgY29uc3QgcHJldmlvdXNJbmRpY2F0b3IgPSB0aGlzLmdldEluZGljYXRvcihwcmV2aW91cyk7XG4gICAgY29uc3QgY3VycmVudEluZGljYXRvciA9IHRoaXMuZ2V0SW5kaWNhdG9yKGN1cnJlbnQpO1xuICAgIGlmIChwcmV2aW91c0luZGljYXRvciA9PT0gbnVsbCB8fCBjdXJyZW50SW5kaWNhdG9yID09PSBudWxsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXZpb3VzQ2xpZW50UmVjdCA9IHByZXZpb3VzSW5kaWNhdG9yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGN1cnJlbnRDbGllbnRSZWN0ID0gY3VycmVudEluZGljYXRvci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCB3aWR0aERlbHRhID0gcHJldmlvdXNDbGllbnRSZWN0LndpZHRoIC8gY3VycmVudENsaWVudFJlY3Qud2lkdGg7XG4gICAgY29uc3QgeFBvc2l0aW9uID0gcHJldmlvdXNDbGllbnRSZWN0LmxlZnQgLSBjdXJyZW50Q2xpZW50UmVjdC5sZWZ0O1xuICAgIC8vIFNjYWxlIHRoZSBpbmRpY2F0b3Igd2lkdGggdG8gbWF0Y2ggdGhlIHByZXZpb3VzIGluZGljYXRvciB3aWR0aFxuICAgIC8vIGFuZCB0cmFuc2xhdGUgaXQgb24gdG9wIG9mIHRoZSBwcmV2aW91cyBpbmRpY2F0b3JcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt4UG9zaXRpb259cHgsIDAsIDApIHNjYWxlWCgke3dpZHRoRGVsdGF9KWA7XG4gICAgd3JpdGVUYXNrKCgpID0+IHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgdHJhbnNpdGlvbiBiZWZvcmUgcG9zaXRpb25pbmcgb24gdG9wIG9mIHRoZSBwcmV2aW91cyBpbmRpY2F0b3JcbiAgICAgIGN1cnJlbnRJbmRpY2F0b3IuY2xhc3NMaXN0LnJlbW92ZSgnc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkJyk7XG4gICAgICBjdXJyZW50SW5kaWNhdG9yLnN0eWxlLnNldFByb3BlcnR5KCd0cmFuc2Zvcm0nLCB0cmFuc2Zvcm0pO1xuICAgICAgLy8gRm9yY2UgYSByZXBhaW50IHRvIGVuc3VyZSB0aGUgdHJhbnNmb3JtIGhhcHBlbnNcbiAgICAgIGN1cnJlbnRJbmRpY2F0b3IuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAvLyBBZGQgdGhlIHRyYW5zaXRpb24gdG8gbW92ZSB0aGUgaW5kaWNhdG9yIGludG8gcGxhY2VcbiAgICAgIGN1cnJlbnRJbmRpY2F0b3IuY2xhc3NMaXN0LmFkZCgnc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkJyk7XG4gICAgICAvLyBSZW1vdmUgdGhlIHRyYW5zZm9ybSB0byBzbGlkZSB0aGUgaW5kaWNhdG9yIGJhY2sgdG8gdGhlIGJ1dHRvbiBjbGlja2VkXG4gICAgICBjdXJyZW50SW5kaWNhdG9yLnN0eWxlLnNldFByb3BlcnR5KCd0cmFuc2Zvcm0nLCAnJyk7XG4gICAgfSk7XG4gICAgdGhpcy52YWx1ZSA9IGN1cnJlbnQudmFsdWU7XG4gICAgdGhpcy5zZXRDaGVja2VkQ2xhc3NlcygpO1xuICB9XG4gIHNldENoZWNrZWRDbGFzc2VzKCkge1xuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICBjb25zdCBpbmRleCA9IGJ1dHRvbnMuZmluZEluZGV4KGJ1dHRvbiA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgIGNvbnN0IG5leHQgPSBpbmRleCArIDE7XG4gICAgLy8gS2VlcCB0cmFjayBvZiB0aGUgY3VycmVudGx5IGNoZWNrZWQgYnV0dG9uXG4gICAgdGhpcy5jaGVja2VkID0gYnV0dG9ucy5maW5kKGJ1dHRvbiA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgIGZvciAoY29uc3QgYnV0dG9uIG9mIGJ1dHRvbnMpIHtcbiAgICAgIGJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdzZWdtZW50LWJ1dHRvbi1hZnRlci1jaGVja2VkJyk7XG4gICAgfVxuICAgIGlmIChuZXh0IDwgYnV0dG9ucy5sZW5ndGgpIHtcbiAgICAgIGJ1dHRvbnNbbmV4dF0uY2xhc3NMaXN0LmFkZCgnc2VnbWVudC1idXR0b24tYWZ0ZXItY2hlY2tlZCcpO1xuICAgIH1cbiAgfVxuICBzZXROZXh0SW5kZXgoZGV0YWlsLCBpc0VuZCA9IGZhbHNlKSB7XG4gICAgY29uc3QgaXNSVEwgPSBkb2N1bWVudC5kaXIgPT09ICdydGwnO1xuICAgIGNvbnN0IGFjdGl2YXRlZCA9IHRoaXMuYWN0aXZhdGVkO1xuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICBjb25zdCBpbmRleCA9IGJ1dHRvbnMuZmluZEluZGV4KGJ1dHRvbiA9PiBidXR0b24udmFsdWUgPT09IHRoaXMudmFsdWUpO1xuICAgIGNvbnN0IHByZXZpb3VzID0gYnV0dG9uc1tpbmRleF07XG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgbGV0IG5leHRJbmRleDtcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIEdldCB0aGUgZWxlbWVudCB0aGF0IHRoZSB0b3VjaCBldmVudCBzdGFydGVkIG9uIGluIGNhc2VcbiAgICAvLyBpdCB3YXMgdGhlIGNoZWNrZWQgYnV0dG9uLCB0aGVuIHdlIHdpbGwgbW92ZSB0aGUgaW5kaWNhdG9yXG4gICAgY29uc3QgcmVjdCA9IHByZXZpb3VzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGxlZnQgPSByZWN0LmxlZnQ7XG4gICAgY29uc3Qgd2lkdGggPSByZWN0LndpZHRoO1xuICAgIC8vIEdldCB0aGUgZWxlbWVudCB0aGF0IHRoZSBnZXN0dXJlIGlzIG9uIHRvcCBvZiBiYXNlZCBvbiB0aGUgY3VycmVudFggb2YgdGhlXG4gICAgLy8gZ2VzdHVyZSBldmVudCBhbmQgdGhlIFkgY29vcmRpbmF0ZSBvZiB0aGUgc3RhcnRpbmcgZWxlbWVudCwgc2luY2UgdGhlIGdlc3R1cmVcbiAgICAvLyBjYW4gbW92ZSB1cCBhbmQgZG93biBvZmYgb2YgdGhlIHNlZ21lbnRcbiAgICBjb25zdCBjdXJyZW50WCA9IGRldGFpbC5jdXJyZW50WDtcbiAgICBjb25zdCBwcmV2aW91c1kgPSByZWN0LnRvcCArIChyZWN0LmhlaWdodCAvIDIpO1xuICAgIC8qKlxuICAgICAqIFNlZ21lbnQgY2FuIGJlIHVzZWQgaW5zaWRlIHRoZSBzaGFkb3cgZG9tXG4gICAgICogc28gZG9pbmcgZG9jdW1lbnQuZWxlbWVudEZyb21Qb2ludCB3b3VsZCBuZXZlclxuICAgICAqIHJldHVybiBhIHNlZ21lbnQgYnV0dG9uIGluIHRoYXQgaW5zdGFuY2UuXG4gICAgICogV2UgdXNlIGdldFJvb3ROb2RlIHRvIHdoaWNoIHdpbGwgcmV0dXJuIHRoZSBwYXJlbnRcbiAgICAgKiBzaGFkb3cgcm9vdCBpZiB1c2VkIGluc2lkZSBhIHNoYWRvdyBjb21wb25lbnQgYW5kXG4gICAgICogcmV0dXJucyBkb2N1bWVudCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuZWwuZ2V0Um9vdE5vZGUoKTtcbiAgICBjb25zdCBuZXh0RWwgPSByb290LmVsZW1lbnRGcm9tUG9pbnQoY3VycmVudFgsIHByZXZpb3VzWSk7XG4gICAgY29uc3QgZGVjcmVhc2VJbmRleCA9IGlzUlRMID8gY3VycmVudFggPiAobGVmdCArIHdpZHRoKSA6IGN1cnJlbnRYIDwgbGVmdDtcbiAgICBjb25zdCBpbmNyZWFzZUluZGV4ID0gaXNSVEwgPyBjdXJyZW50WCA8IGxlZnQgOiBjdXJyZW50WCA+IChsZWZ0ICsgd2lkdGgpO1xuICAgIC8vIElmIHRoZSBpbmRpY2F0b3IgaXMgY3VycmVudGx5IGFjdGl2YXRlZCB0aGVuIHdlIGhhdmUgc3RhcnRlZCB0aGUgZ2VzdHVyZVxuICAgIC8vIG9uIHRvcCBvZiB0aGUgY2hlY2tlZCBidXR0b24gc28gd2UgbmVlZCB0byBzbGlkZSB0aGUgaW5kaWNhdG9yXG4gICAgLy8gYnkgY2hlY2tpbmcgdGhlIGJ1dHRvbiBuZXh0IHRvIGl0IGFzIHdlIG1vdmVcbiAgICBpZiAoYWN0aXZhdGVkICYmICFpc0VuZCkge1xuICAgICAgLy8gRGVjcmVhc2UgaW5kZXgsIG1vdmUgbGVmdCBpbiBMVFIgJiByaWdodCBpbiBSVExcbiAgICAgIGlmIChkZWNyZWFzZUluZGV4KSB7XG4gICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaW5kZXggLSAxO1xuICAgICAgICBpZiAobmV3SW5kZXggPj0gMCkge1xuICAgICAgICAgIG5leHRJbmRleCA9IG5ld0luZGV4O1xuICAgICAgICB9XG4gICAgICAgIC8vIEluY3JlYXNlIGluZGV4LCBtb3ZlcyByaWdodCBpbiBMVFIgJiBsZWZ0IGluIFJUTFxuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaW5jcmVhc2VJbmRleCkge1xuICAgICAgICBpZiAoYWN0aXZhdGVkICYmICFpc0VuZCkge1xuICAgICAgICAgIGNvbnN0IG5ld0luZGV4ID0gaW5kZXggKyAxO1xuICAgICAgICAgIGlmIChuZXdJbmRleCA8IGJ1dHRvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBuZXh0SW5kZXggPSBuZXdJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChuZXh0SW5kZXggIT09IHVuZGVmaW5lZCAmJiAhYnV0dG9uc1tuZXh0SW5kZXhdLmRpc2FibGVkKSB7XG4gICAgICAgIGN1cnJlbnQgPSBidXR0b25zW25leHRJbmRleF07XG4gICAgICB9XG4gICAgfVxuICAgIC8vIElmIHRoZSBpbmRpY2F0b3IgaXMgbm90IGFjdGl2YXRlZCB0aGVuIHdlIHdpbGwganVzdCBzZXQgdGhlIGluZGljYXRvclxuICAgIC8vIHRvIHRoZSBlbGVtZW50IHdoZXJlIHRoZSBnZXN0dXJlIGVuZGVkXG4gICAgaWYgKCFhY3RpdmF0ZWQgJiYgaXNFbmQpIHtcbiAgICAgIGN1cnJlbnQgPSBuZXh0RWw7XG4gICAgfVxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSAqL1xuICAgIGlmIChjdXJyZW50ICE9IG51bGwpIHtcbiAgICAgIC8qKlxuICAgICAgICogSWYgY3VycmVudCBlbGVtZW50IGlzIGlvbi1zZWdtZW50IHRoZW4gdGhhdCBtZWFuc1xuICAgICAgICogdXNlciB0cmllZCB0byBzZWxlY3QgYSBkaXNhYmxlZCBpb24tc2VnbWVudC1idXR0b24sXG4gICAgICAgKiBhbmQgd2Ugc2hvdWxkIG5vdCB1cGRhdGUgdGhlIHJpcHBsZS5cbiAgICAgICAqL1xuICAgICAgaWYgKGN1cnJlbnQudGFnTmFtZSA9PT0gJ0lPTi1TRUdNRU5UJykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocHJldmlvdXMgIT09IGN1cnJlbnQpIHtcbiAgICAgICAgdGhpcy5jaGVja0J1dHRvbihwcmV2aW91cywgY3VycmVudCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGVtaXRTdHlsZSgpIHtcbiAgICB0aGlzLmlvblN0eWxlLmVtaXQoe1xuICAgICAgJ3NlZ21lbnQnOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgb25LZXlEb3duKGV2KSB7XG4gICAgY29uc3QgaXNSVEwgPSBkb2N1bWVudC5kaXIgPT09ICdydGwnO1xuICAgIGxldCBrZXlEb3duU2VsZWN0c0J1dHRvbiA9IHRoaXMuc2VsZWN0T25Gb2N1cztcbiAgICBsZXQgY3VycmVudDtcbiAgICBzd2l0Y2ggKGV2LmtleSkge1xuICAgICAgY2FzZSAnQXJyb3dSaWdodCc6XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGN1cnJlbnQgPSBpc1JUTCA/IHRoaXMuZ2V0U2VnbWVudEJ1dHRvbigncHJldmlvdXMnKSA6IHRoaXMuZ2V0U2VnbWVudEJ1dHRvbignbmV4dCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0Fycm93TGVmdCc6XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGN1cnJlbnQgPSBpc1JUTCA/IHRoaXMuZ2V0U2VnbWVudEJ1dHRvbignbmV4dCcpIDogdGhpcy5nZXRTZWdtZW50QnV0dG9uKCdwcmV2aW91cycpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0hvbWUnOlxuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjdXJyZW50ID0gdGhpcy5nZXRTZWdtZW50QnV0dG9uKCdmaXJzdCcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0VuZCc6XG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGN1cnJlbnQgPSB0aGlzLmdldFNlZ21lbnRCdXR0b24oJ2xhc3QnKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICcgJzpcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgZXYucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgY3VycmVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGtleURvd25TZWxlY3RzQnV0dG9uID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChrZXlEb3duU2VsZWN0c0J1dHRvbikge1xuICAgICAgY29uc3QgcHJldmlvdXMgPSB0aGlzLmNoZWNrZWQgfHwgY3VycmVudDtcbiAgICAgIHRoaXMuY2hlY2tCdXR0b24ocHJldmlvdXMsIGN1cnJlbnQpO1xuICAgIH1cbiAgICBjdXJyZW50LmZvY3VzKCk7XG4gIH1cbiAgLyogQnkgZGVmYXVsdCwgZm9jdXMgaXMgZGVsZWdhdGVkIHRvIHRoZSBzZWxlY3RlZCBgaW9uLXNlZ21lbnQtYnV0dG9uYC5cbiAgICogSWYgdGhlcmUgaXMgbm8gc2VsZWN0ZWQgYnV0dG9uLCBmb2N1cyB3aWxsIGluc3RlYWQgcGFzcyB0byB0aGUgZmlyc3QgY2hpbGQgYnV0dG9uLlxuICAqKi9cbiAgZW5zdXJlRm9jdXNhYmxlKCkge1xuICAgIHZhciBfYTtcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGJ1dHRvbnMgPSB0aGlzLmdldEJ1dHRvbnMoKTtcbiAgICAoX2EgPSBidXR0b25zWzBdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IG1vZGUgPSBnZXRJb25Nb2RlKHRoaXMpO1xuICAgIHJldHVybiAoaChIb3N0LCB7IHJvbGU6IFwidGFibGlzdFwiLCBvbkNsaWNrOiB0aGlzLm9uQ2xpY2ssIGNsYXNzOiBjcmVhdGVDb2xvckNsYXNzZXModGhpcy5jb2xvciwge1xuICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgICdpbi10b29sYmFyJzogaG9zdENvbnRleHQoJ2lvbi10b29sYmFyJywgdGhpcy5lbCksXG4gICAgICAgICdpbi10b29sYmFyLWNvbG9yJzogaG9zdENvbnRleHQoJ2lvbi10b29sYmFyW2NvbG9yXScsIHRoaXMuZWwpLFxuICAgICAgICAnc2VnbWVudC1hY3RpdmF0ZWQnOiB0aGlzLmFjdGl2YXRlZCxcbiAgICAgICAgJ3NlZ21lbnQtZGlzYWJsZWQnOiB0aGlzLmRpc2FibGVkLFxuICAgICAgICAnc2VnbWVudC1zY3JvbGxhYmxlJzogdGhpcy5zY3JvbGxhYmxlXG4gICAgICB9KSB9LCBoKFwic2xvdFwiLCBudWxsKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbiAgc3RhdGljIGdldCB3YXRjaGVycygpIHsgcmV0dXJuIHtcbiAgICBcImNvbG9yXCI6IFtcImNvbG9yQ2hhbmdlZFwiXSxcbiAgICBcInN3aXBlR2VzdHVyZVwiOiBbXCJzd2lwZUdlc3R1cmVDaGFuZ2VkXCJdLFxuICAgIFwidmFsdWVcIjogW1widmFsdWVDaGFuZ2VkXCJdLFxuICAgIFwiZGlzYWJsZWRcIjogW1wiZGlzYWJsZWRDaGFuZ2VkXCJdXG4gIH07IH1cbn07XG5TZWdtZW50LnN0eWxlID0ge1xuICBpb3M6IHNlZ21lbnRJb3NDc3MsXG4gIG1kOiBzZWdtZW50TWRDc3Ncbn07XG5cbmNvbnN0IHNlZ21lbnRCdXR0b25Jb3NDc3MgPSBcIjpob3N0ey0tY29sb3I6aW5pdGlhbDstLWNvbG9yLWhvdmVyOnZhcigtLWNvbG9yKTstLWNvbG9yLWNoZWNrZWQ6dmFyKC0tY29sb3IpOy0tY29sb3ItZGlzYWJsZWQ6dmFyKC0tY29sb3IpOy0tcGFkZGluZy1zdGFydDowOy0tcGFkZGluZy1lbmQ6MDstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWJvdHRvbTowO2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXg6MSAxIGF1dG87ZmxleDoxIDEgYXV0bzstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtoZWlnaHQ6YXV0bztiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQpO2NvbG9yOnZhcigtLWNvbG9yKTt0ZXh0LWRlY29yYXRpb246bm9uZTt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDstd2Via2l0LWZvbnQta2VybmluZzpub25lO2ZvbnQta2VybmluZzpub25lO2N1cnNvcjpwb2ludGVyfS5idXR0b24tbmF0aXZle2JvcmRlci1yYWRpdXM6MDtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtc3R5bGU6aW5oZXJpdDtmb250LXdlaWdodDppbmhlcml0O2xldHRlci1zcGFjaW5nOmluaGVyaXQ7dGV4dC1kZWNvcmF0aW9uOmluaGVyaXQ7dGV4dC1pbmRlbnQ6aW5oZXJpdDt0ZXh0LW92ZXJmbG93OmluaGVyaXQ7dGV4dC10cmFuc2Zvcm06aW5oZXJpdDt0ZXh0LWFsaWduOmluaGVyaXQ7d2hpdGUtc3BhY2U6aW5oZXJpdDtjb2xvcjppbmhlcml0O21hcmdpbi1sZWZ0OnZhcigtLW1hcmdpbi1zdGFydCk7bWFyZ2luLXJpZ2h0OnZhcigtLW1hcmdpbi1lbmQpO21hcmdpbi10b3A6dmFyKC0tbWFyZ2luLXRvcCk7bWFyZ2luLWJvdHRvbTp2YXIoLS1tYXJnaW4tYm90dG9tKTtwYWRkaW5nLWxlZnQ6dmFyKC0tcGFkZGluZy1zdGFydCk7cGFkZGluZy1yaWdodDp2YXIoLS1wYWRkaW5nLWVuZCk7cGFkZGluZy10b3A6dmFyKC0tcGFkZGluZy10b3ApO3BhZGRpbmctYm90dG9tOnZhcigtLXBhZGRpbmctYm90dG9tKTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAgMCwgIDApO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWRpcmVjdGlvbjppbmhlcml0O2ZsZXgtZGlyZWN0aW9uOmluaGVyaXQ7LW1zLWZsZXgtcG9zaXRpdmU6MTtmbGV4LWdyb3c6MTstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTttaW4td2lkdGg6aW5oZXJpdDttYXgtd2lkdGg6aW5oZXJpdDtoZWlnaHQ6YXV0bzttaW4taGVpZ2h0OmluaGVyaXQ7bWF4LWhlaWdodDppbmhlcml0Oy13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS10cmFuc2l0aW9uKTt0cmFuc2l0aW9uOnZhcigtLXRyYW5zaXRpb24pO2JvcmRlcjpub25lO291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O2NvbnRhaW46Y29udGVudDtwb2ludGVyLWV2ZW50czpub25lO292ZXJmbG93OmhpZGRlbjt6LWluZGV4OjJ9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXsuYnV0dG9uLW5hdGl2ZXttYXJnaW4tbGVmdDp1bnNldDttYXJnaW4tcmlnaHQ6dW5zZXQ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6dmFyKC0tbWFyZ2luLXN0YXJ0KTttYXJnaW4taW5saW5lLXN0YXJ0OnZhcigtLW1hcmdpbi1zdGFydCk7LXdlYmtpdC1tYXJnaW4tZW5kOnZhcigtLW1hcmdpbi1lbmQpO21hcmdpbi1pbmxpbmUtZW5kOnZhcigtLW1hcmdpbi1lbmQpfX1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5idXR0b24tbmF0aXZle3BhZGRpbmctbGVmdDp1bnNldDtwYWRkaW5nLXJpZ2h0OnVuc2V0Oy13ZWJraXQtcGFkZGluZy1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLWlubGluZS1zdGFydDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTstd2Via2l0LXBhZGRpbmctZW5kOnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLWlubGluZS1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpfX0uYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7bGVmdDowO3JpZ2h0OjA7dG9wOjA7Ym90dG9tOjA7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXFwiXFxcIjtvcGFjaXR5OjB9LmJ1dHRvbi1pbm5lcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleC1mbG93OmluaGVyaXQ7ZmxleC1mbG93OmluaGVyaXQ7LW1zLWZsZXgtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDoxfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkKXtiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtY2hlY2tlZCk7Y29sb3I6dmFyKC0tY29sb3ItY2hlY2tlZCl9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWRpc2FibGVkKXtjdXJzb3I6ZGVmYXVsdDtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5pb24tZm9jdXNlZCkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItZm9jdXNlZCl9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWZvY3VzZWQpO29wYWNpdHk6dmFyKC0tYmFja2dyb3VuZC1mb2N1c2VkLW9wYWNpdHkpfTpob3N0KDpmb2N1cyl7b3V0bGluZTpub25lfUBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcil7Omhvc3QoOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1ob3Zlcil9Omhvc3QoOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1iYWNrZ3JvdW5kLWhvdmVyKTtvcGFjaXR5OnZhcigtLWJhY2tncm91bmQtaG92ZXItb3BhY2l0eSl9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6aG92ZXIpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWNoZWNrZWQpfX06OnNsb3R0ZWQoaW9uLWljb24pey1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDstbXMtZmxleC1vcmRlcjotMTtvcmRlcjotMTtwb2ludGVyLWV2ZW50czpub25lfTo6c2xvdHRlZChpb24tbGFiZWwpe2Rpc3BsYXk6YmxvY2s7LW1zLWZsZXgtaXRlbS1hbGlnbjpjZW50ZXI7YWxpZ24tc2VsZjpjZW50ZXI7bGluZS1oZWlnaHQ6MjJweDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO3doaXRlLXNwYWNlOm5vd3JhcDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tdG9wKSAuYnV0dG9uLW5hdGl2ZXstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tc3RhcnQpIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1lbmQpIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpyb3ctcmV2ZXJzZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tYm90dG9tKSAuYnV0dG9uLW5hdGl2ZXstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2U7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2V9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWhpZGUpIDo6c2xvdHRlZChpb24taWNvbil7ZGlzcGxheTpub25lfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtbGFiZWwtaGlkZSkgOjpzbG90dGVkKGlvbi1sYWJlbCl7ZGlzcGxheTpub25lfWlvbi1yaXBwbGUtZWZmZWN0e2NvbG9yOnZhcigtLXJpcHBsZS1jb2xvciwgdmFyKC0tY29sb3ItY2hlY2tlZCkpfS5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7dHJhbnNmb3JtLW9yaWdpbjpsZWZ0O3Bvc2l0aW9uOmFic29sdXRlO29wYWNpdHk6MDstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtLCBvcGFjaXR5O3BvaW50ZXItZXZlbnRzOm5vbmV9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5ke3dpZHRoOjEwMCU7aGVpZ2h0OnZhcigtLWluZGljYXRvci1oZWlnaHQpOy13ZWJraXQtdHJhbnNmb3JtOnZhcigtLWluZGljYXRvci10cmFuc2Zvcm0pO3RyYW5zZm9ybTp2YXIoLS1pbmRpY2F0b3ItdHJhbnNmb3JtKTstd2Via2l0LWJveC1zaGFkb3c6dmFyKC0taW5kaWNhdG9yLWJveC1zaGFkb3cpO2JveC1zaGFkb3c6dmFyKC0taW5kaWNhdG9yLWJveC1zaGFkb3cpO3BvaW50ZXItZXZlbnRzOm5vbmV9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1hbmltYXRlZHstd2Via2l0LXRyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pO3RyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9ye29wYWNpdHk6MX1AbWVkaWEgKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSl7LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5key13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1hbmltYXRlZHstd2Via2l0LXRyYW5zaXRpb246bm9uZTt0cmFuc2l0aW9uOm5vbmV9fTpob3N0ey0tYmFja2dyb3VuZDpub25lOy0tYmFja2dyb3VuZC1jaGVja2VkOm5vbmU7LS1iYWNrZ3JvdW5kLWhvdmVyOm5vbmU7LS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHk6MDstLWJhY2tncm91bmQtZm9jdXNlZDpub25lOy0tYmFja2dyb3VuZC1mb2N1c2VkLW9wYWNpdHk6MDstLWJvcmRlci1yYWRpdXM6N3B4Oy0tYm9yZGVyLXdpZHRoOjFweDstLWJvcmRlci1jb2xvcjpyZ2JhKHZhcigtLWlvbi10ZXh0LWNvbG9yLXJnYiwgMCwgMCwgMCksIDAuMTIpOy0tYm9yZGVyLXN0eWxlOnNvbGlkOy0taW5kaWNhdG9yLWJveC1zaGFkb3c6MCAwIDVweCByZ2JhKDAsIDAsIDAsIDAuMTYpOy0taW5kaWNhdG9yLWNvbG9yOnZhcigtLWlvbi1jb2xvci1zdGVwLTM1MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKTstLWluZGljYXRvci1oZWlnaHQ6MTAwJTstLWluZGljYXRvci10cmFuc2l0aW9uOnRyYW5zZm9ybSAyNjBtcyBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpOy0taW5kaWNhdG9yLXRyYW5zZm9ybTpub25lOy0tdHJhbnNpdGlvbjoxMDBtcyBhbGwgbGluZWFyOy0tcGFkZGluZy10b3A6MDstLXBhZGRpbmctZW5kOjEzcHg7LS1wYWRkaW5nLWJvdHRvbTowOy0tcGFkZGluZy1zdGFydDoxM3B4O21hcmdpbi10b3A6MnB4O21hcmdpbi1ib3R0b206MnB4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjA7ZmxleC1iYXNpczowOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC1kaXJlY3Rpb246cm93O21pbi13aWR0aDo3MHB4O21pbi1oZWlnaHQ6MjhweDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLCAwLCAwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwgMCwgMCk7Zm9udC1zaXplOjEzcHg7Zm9udC13ZWlnaHQ6NDUwO2xpbmUtaGVpZ2h0OjM3cHh9Omhvc3Q6OmJlZm9yZXttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6NXB4O21hcmdpbi1ib3R0b206NXB4Oy13ZWJraXQtdHJhbnNpdGlvbjoxNjBtcyBvcGFjaXR5IGVhc2UtaW4tb3V0O3RyYW5zaXRpb246MTYwbXMgb3BhY2l0eSBlYXNlLWluLW91dDstd2Via2l0LXRyYW5zaXRpb24tZGVsYXk6MTAwbXM7dHJhbnNpdGlvbi1kZWxheToxMDBtcztib3JkZXItbGVmdDp2YXIoLS1ib3JkZXItd2lkdGgpIHZhcigtLWJvcmRlci1zdHlsZSkgdmFyKC0tYm9yZGVyLWNvbG9yKTtjb250ZW50OlxcXCJcXFwiO29wYWNpdHk6MTt3aWxsLWNoYW5nZTpvcGFjaXR5fTpob3N0KDpmaXJzdC1vZi10eXBlKTo6YmVmb3Jle2JvcmRlci1sZWZ0LWNvbG9yOnRyYW5zcGFyZW50fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1kaXNhYmxlZCl7b3BhY2l0eTowLjN9OjpzbG90dGVkKGlvbi1pY29uKXtmb250LXNpemU6MjRweH06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tc3RhcnQpIDo6c2xvdHRlZChpb24tbGFiZWwpe21hcmdpbi1sZWZ0OjJweDttYXJnaW4tcmlnaHQ6MH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OjJweDttYXJnaW4taW5saW5lLXN0YXJ0OjJweDstd2Via2l0LW1hcmdpbi1lbmQ6MDttYXJnaW4taW5saW5lLWVuZDowfX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tZW5kKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDoycHh9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tZW5kKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXttYXJnaW4tbGVmdDp1bnNldDttYXJnaW4tcmlnaHQ6dW5zZXQ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjJweDttYXJnaW4taW5saW5lLWVuZDoycHh9fS5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7cGFkZGluZy1sZWZ0OjJweDtwYWRkaW5nLXJpZ2h0OjJweDtsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7cGFkZGluZy1sZWZ0OnVuc2V0O3BhZGRpbmctcmlnaHQ6dW5zZXQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OjJweDtwYWRkaW5nLWlubGluZS1zdGFydDoycHg7LXdlYmtpdC1wYWRkaW5nLWVuZDoycHg7cGFkZGluZy1pbmxpbmUtZW5kOjJweH19LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5ke2JvcmRlci1yYWRpdXM6dmFyKC0tYm9yZGVyLXJhZGl1cyk7YmFja2dyb3VuZDp2YXIoLS1pbmRpY2F0b3ItY29sb3IpfS5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHstd2Via2l0LXRyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pO3RyYW5zaXRpb246dmFyKC0taW5kaWNhdG9yLXRyYW5zaXRpb24pfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1jaGVja2VkKTo6YmVmb3JlLDpob3N0KC5zZWdtZW50LWJ1dHRvbi1hZnRlci1jaGVja2VkKTo6YmVmb3Jle29wYWNpdHk6MH06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZCl7ei1pbmRleDotMX06aG9zdCguc2VnbWVudC1idXR0b24tYWN0aXZhdGVkKXstLWluZGljYXRvci10cmFuc2Zvcm06c2NhbGUoMC45NSl9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZXtvcGFjaXR5OjAuN31AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7b3BhY2l0eTowLjV9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6aG92ZXIpIC5idXR0b24tbmF0aXZle29wYWNpdHk6MX19Omhvc3QoLmluLXNlZ21lbnQtY29sb3Ipe2JhY2tncm91bmQ6bm9uZTtjb2xvcjp2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3IpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZHtiYWNrZ3JvdW5kOnZhcigtLWlvbi1jb2xvci1zdGVwLTM1MCwgdmFyKC0taW9uLWJhY2tncm91bmQtY29sb3IsICNmZmYpKX1AbWVkaWEgKGFueS1ob3ZlcjogaG92ZXIpezpob3N0KC5pbi1zZWdtZW50LWNvbG9yOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZSw6aG9zdCguaW4tc2VnbWVudC1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tdGV4dC1jb2xvciwgIzAwMCl9fTpob3N0KC5pbi10b29sYmFyOm5vdCguaW4tc2VnbWVudC1jb2xvcikpey0tYmFja2dyb3VuZC1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtYmFja2dyb3VuZC1jaGVja2VkLCBub25lKTstLWNvbG9yOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3IsIHZhcigtLWlvbi10b29sYmFyLWNvbG9yKSwgaW5pdGlhbCk7LS1jb2xvci1jaGVja2VkOnZhcigtLWlvbi10b29sYmFyLXNlZ21lbnQtY29sb3ItY2hlY2tlZCwgdmFyKC0taW9uLXRvb2xiYXItY29sb3IpLCBpbml0aWFsKTstLWluZGljYXRvci1jb2xvcjp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWluZGljYXRvci1jb2xvciwgdmFyKC0taW9uLWNvbG9yLXN0ZXAtMzUwLCB2YXIoLS1pb24tYmFja2dyb3VuZC1jb2xvciwgI2ZmZikpKX06aG9zdCguaW4tdG9vbGJhci1jb2xvcikgLnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5ke2JhY2tncm91bmQ6I2ZmZn06aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfTpob3N0KC5pbi10b29sYmFyLWNvbG9yLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQ6bm90KC5pbi1zZWdtZW50LWNvbG9yKSkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfUBtZWRpYSAoYW55LWhvdmVyOiBob3Zlcil7Omhvc3QoLmluLXRvb2xiYXItY29sb3I6bm90KC5pbi1zZWdtZW50LWNvbG9yKTpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX06aG9zdCguaW4tdG9vbGJhci1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOm5vdCguaW4tc2VnbWVudC1jb2xvcik6aG92ZXIpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1iYXNlKX19XCI7XG5cbmNvbnN0IHNlZ21lbnRCdXR0b25NZENzcyA9IFwiOmhvc3R7LS1jb2xvcjppbml0aWFsOy0tY29sb3ItaG92ZXI6dmFyKC0tY29sb3IpOy0tY29sb3ItY2hlY2tlZDp2YXIoLS1jb2xvcik7LS1jb2xvci1kaXNhYmxlZDp2YXIoLS1jb2xvcik7LS1wYWRkaW5nLXN0YXJ0OjA7LS1wYWRkaW5nLWVuZDowOy0tcGFkZGluZy10b3A6MDstLXBhZGRpbmctYm90dG9tOjA7Ym9yZGVyLXJhZGl1czp2YXIoLS1ib3JkZXItcmFkaXVzKTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtwb3NpdGlvbjpyZWxhdGl2ZTstbXMtZmxleDoxIDEgYXV0bztmbGV4OjEgMSBhdXRvOy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1uO2hlaWdodDphdXRvO2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZCk7Y29sb3I6dmFyKC0tY29sb3IpO3RleHQtZGVjb3JhdGlvbjpub25lO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwOy13ZWJraXQtZm9udC1rZXJuaW5nOm5vbmU7Zm9udC1rZXJuaW5nOm5vbmU7Y3Vyc29yOnBvaW50ZXJ9LmJ1dHRvbi1uYXRpdmV7Ym9yZGVyLXJhZGl1czowO2ZvbnQtZmFtaWx5OmluaGVyaXQ7Zm9udC1zaXplOmluaGVyaXQ7Zm9udC1zdHlsZTppbmhlcml0O2ZvbnQtd2VpZ2h0OmluaGVyaXQ7bGV0dGVyLXNwYWNpbmc6aW5oZXJpdDt0ZXh0LWRlY29yYXRpb246aW5oZXJpdDt0ZXh0LWluZGVudDppbmhlcml0O3RleHQtb3ZlcmZsb3c6aW5oZXJpdDt0ZXh0LXRyYW5zZm9ybTppbmhlcml0O3RleHQtYWxpZ246aW5oZXJpdDt3aGl0ZS1zcGFjZTppbmhlcml0O2NvbG9yOmluaGVyaXQ7bWFyZ2luLWxlZnQ6dmFyKC0tbWFyZ2luLXN0YXJ0KTttYXJnaW4tcmlnaHQ6dmFyKC0tbWFyZ2luLWVuZCk7bWFyZ2luLXRvcDp2YXIoLS1tYXJnaW4tdG9wKTttYXJnaW4tYm90dG9tOnZhcigtLW1hcmdpbi1ib3R0b20pO3BhZGRpbmctbGVmdDp2YXIoLS1wYWRkaW5nLXN0YXJ0KTtwYWRkaW5nLXJpZ2h0OnZhcigtLXBhZGRpbmctZW5kKTtwYWRkaW5nLXRvcDp2YXIoLS1wYWRkaW5nLXRvcCk7cGFkZGluZy1ib3R0b206dmFyKC0tcGFkZGluZy1ib3R0b20pOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsICAwLCAgMCk7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7LW1zLWZsZXgtZGlyZWN0aW9uOmluaGVyaXQ7ZmxleC1kaXJlY3Rpb246aW5oZXJpdDstbXMtZmxleC1wb3NpdGl2ZToxO2ZsZXgtZ3JvdzoxOy1tcy1mbGV4LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt3aWR0aDoxMDAlO21pbi13aWR0aDppbmhlcml0O21heC13aWR0aDppbmhlcml0O2hlaWdodDphdXRvO21pbi1oZWlnaHQ6aW5oZXJpdDttYXgtaGVpZ2h0OmluaGVyaXQ7LXdlYmtpdC10cmFuc2l0aW9uOnZhcigtLXRyYW5zaXRpb24pO3RyYW5zaXRpb246dmFyKC0tdHJhbnNpdGlvbik7Ym9yZGVyOm5vbmU7b3V0bGluZTpub25lO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Y29udGFpbjpjb250ZW50O3BvaW50ZXItZXZlbnRzOm5vbmU7b3ZlcmZsb3c6aGlkZGVuO3otaW5kZXg6Mn1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApey5idXR0b24tbmF0aXZle21hcmdpbi1sZWZ0OnVuc2V0O21hcmdpbi1yaWdodDp1bnNldDstd2Via2l0LW1hcmdpbi1zdGFydDp2YXIoLS1tYXJnaW4tc3RhcnQpO21hcmdpbi1pbmxpbmUtc3RhcnQ6dmFyKC0tbWFyZ2luLXN0YXJ0KTstd2Via2l0LW1hcmdpbi1lbmQ6dmFyKC0tbWFyZ2luLWVuZCk7bWFyZ2luLWlubGluZS1lbmQ6dmFyKC0tbWFyZ2luLWVuZCl9fUBzdXBwb3J0cyAoKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKSBvciAobWFyZ2luLWlubGluZS1zdGFydDogMCkpIG9yICgtd2Via2l0LW1hcmdpbi1zdGFydDogMCl7LmJ1dHRvbi1uYXRpdmV7cGFkZGluZy1sZWZ0OnVuc2V0O3BhZGRpbmctcmlnaHQ6dW5zZXQ7LXdlYmtpdC1wYWRkaW5nLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpO3BhZGRpbmctaW5saW5lLXN0YXJ0OnZhcigtLXBhZGRpbmctc3RhcnQpOy13ZWJraXQtcGFkZGluZy1lbmQ6dmFyKC0tcGFkZGluZy1lbmQpO3BhZGRpbmctaW5saW5lLWVuZDp2YXIoLS1wYWRkaW5nLWVuZCl9fS5idXR0b24tbmF0aXZlOjphZnRlcntsZWZ0OjA7cmlnaHQ6MDt0b3A6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTtjb250ZW50OlxcXCJcXFwiO29wYWNpdHk6MH0uYnV0dG9uLWlubmVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4LWZsb3c6aW5oZXJpdDtmbGV4LWZsb3c6aW5oZXJpdDstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt6LWluZGV4OjF9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQpe2JhY2tncm91bmQ6dmFyKC0tYmFja2dyb3VuZC1jaGVja2VkKTtjb2xvcjp2YXIoLS1jb2xvci1jaGVja2VkKX06aG9zdCguc2VnbWVudC1idXR0b24tZGlzYWJsZWQpe2N1cnNvcjpkZWZhdWx0O3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZXtjb2xvcjp2YXIoLS1jb2xvci1mb2N1c2VkKX06aG9zdCguaW9uLWZvY3VzZWQpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtZm9jdXNlZCk7b3BhY2l0eTp2YXIoLS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eSl9Omhvc3QoOmZvY3VzKXtvdXRsaW5lOm5vbmV9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCg6aG92ZXIpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWNvbG9yLWhvdmVyKX06aG9zdCg6aG92ZXIpIC5idXR0b24tbmF0aXZlOjphZnRlcntiYWNrZ3JvdW5kOnZhcigtLWJhY2tncm91bmQtaG92ZXIpO29wYWNpdHk6dmFyKC0tYmFja2dyb3VuZC1ob3Zlci1vcGFjaXR5KX06aG9zdCguc2VnbWVudC1idXR0b24tY2hlY2tlZDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0tY29sb3ItY2hlY2tlZCl9fTo6c2xvdHRlZChpb24taWNvbil7LW1zLWZsZXgtbmVnYXRpdmU6MDtmbGV4LXNocmluazowOy1tcy1mbGV4LW9yZGVyOi0xO29yZGVyOi0xO3BvaW50ZXItZXZlbnRzOm5vbmV9OjpzbG90dGVkKGlvbi1sYWJlbCl7ZGlzcGxheTpibG9jazstbXMtZmxleC1pdGVtLWFsaWduOmNlbnRlcjthbGlnbi1zZWxmOmNlbnRlcjtsaW5lLWhlaWdodDoyMnB4O3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwb2ludGVyLWV2ZW50czpub25lfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi10b3ApIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47ZmxleC1kaXJlY3Rpb246Y29sdW1ufTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LWRpcmVjdGlvbjpyb3d9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1pY29uLWVuZCkgLmJ1dHRvbi1uYXRpdmV7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlO2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfTpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1ib3R0b20pIC5idXR0b24tbmF0aXZley1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZTtmbGV4LWRpcmVjdGlvbjpjb2x1bW4tcmV2ZXJzZX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24taGlkZSkgOjpzbG90dGVkKGlvbi1pY29uKXtkaXNwbGF5Om5vbmV9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWxheW91dC1sYWJlbC1oaWRlKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXtkaXNwbGF5Om5vbmV9aW9uLXJpcHBsZS1lZmZlY3R7Y29sb3I6dmFyKC0tcmlwcGxlLWNvbG9yLCB2YXIoLS1jb2xvci1jaGVja2VkKSl9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvcnstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46bGVmdDt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQ7cG9zaXRpb246YWJzb2x1dGU7b3BhY2l0eTowOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sIG9wYWNpdHk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7d2lkdGg6MTAwJTtoZWlnaHQ6dmFyKC0taW5kaWNhdG9yLWhlaWdodCk7LXdlYmtpdC10cmFuc2Zvcm06dmFyKC0taW5kaWNhdG9yLXRyYW5zZm9ybSk7dHJhbnNmb3JtOnZhcigtLWluZGljYXRvci10cmFuc2Zvcm0pOy13ZWJraXQtYm94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7Ym94LXNoYWRvdzp2YXIoLS1pbmRpY2F0b3ItYm94LXNoYWRvdyk7cG9pbnRlci1ldmVudHM6bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbik7dHJhbnNpdGlvbjp2YXIoLS1pbmRpY2F0b3ItdHJhbnNpdGlvbil9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWNoZWNrZWQpIC5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7b3BhY2l0eToxfUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlKXsuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX0uc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkey13ZWJraXQtdHJhbnNpdGlvbjpub25lO3RyYW5zaXRpb246bm9uZX19Omhvc3R7LS1iYWNrZ3JvdW5kOm5vbmU7LS1iYWNrZ3JvdW5kLWNoZWNrZWQ6bm9uZTstLWJhY2tncm91bmQtaG92ZXI6dmFyKC0tY29sb3ItY2hlY2tlZCk7LS1iYWNrZ3JvdW5kLWZvY3VzZWQ6dmFyKC0tY29sb3ItY2hlY2tlZCk7LS1iYWNrZ3JvdW5kLWFjdGl2YXRlZC1vcGFjaXR5OjA7LS1iYWNrZ3JvdW5kLWZvY3VzZWQtb3BhY2l0eTouMTI7LS1iYWNrZ3JvdW5kLWhvdmVyLW9wYWNpdHk6LjA0Oy0tY29sb3I6cmdiYSh2YXIoLS1pb24tdGV4dC1jb2xvci1yZ2IsIDAsIDAsIDApLCAwLjYpOy0tY29sb3ItY2hlY2tlZDp2YXIoLS1pb24tY29sb3ItcHJpbWFyeSwgIzM4ODBmZik7LS1pbmRpY2F0b3ItYm94LXNoYWRvdzpub25lOy0taW5kaWNhdG9yLWNvbG9yOnZhcigtLWNvbG9yLWNoZWNrZWQpOy0taW5kaWNhdG9yLWhlaWdodDoycHg7LS1pbmRpY2F0b3ItdHJhbnNpdGlvbjp0cmFuc2Zvcm0gMjUwbXMgY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC4yLCAxKTstLWluZGljYXRvci10cmFuc2Zvcm06bm9uZTstLXBhZGRpbmctdG9wOjA7LS1wYWRkaW5nLWVuZDoxNnB4Oy0tcGFkZGluZy1ib3R0b206MDstLXBhZGRpbmctc3RhcnQ6MTZweDstLXRyYW5zaXRpb246Y29sb3IgMC4xNXMgbGluZWFyIDBzLCBvcGFjaXR5IDAuMTVzIGxpbmVhciAwczttaW4td2lkdGg6OTBweDttYXgtd2lkdGg6MzYwcHg7bWluLWhlaWdodDo0OHB4O2JvcmRlci13aWR0aDp2YXIoLS1ib3JkZXItd2lkdGgpO2JvcmRlci1zdHlsZTp2YXIoLS1ib3JkZXItc3R5bGUpO2JvcmRlci1jb2xvcjp2YXIoLS1ib3JkZXItY29sb3IpO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtd2VpZ2h0OjUwMDtsZXR0ZXItc3BhY2luZzowLjA2ZW07bGluZS1oZWlnaHQ6NDBweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWRpc2FibGVkKXtvcGFjaXR5OjAuM306aG9zdCguaW4tc2VnbWVudC1jb2xvcil7YmFja2dyb3VuZDpub25lO2NvbG9yOnJnYmEodmFyKC0taW9uLXRleHQtY29sb3ItcmdiLCAwLCAwLCAwKSwgMC42KX06aG9zdCguaW4tc2VnbWVudC1jb2xvcikgaW9uLXJpcHBsZS1lZmZlY3R7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3Iuc2VnbWVudC1idXR0b24tY2hlY2tlZCkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yLmlvbi1mb2N1c2VkKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItYmFzZSl9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCguaW4tc2VnbWVudC1jb2xvcjpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6cmdiYSh2YXIoLS1pb24tdGV4dC1jb2xvci1yZ2IsIDAsIDAsIDApLCAwLjYpfTpob3N0KC5pbi1zZWdtZW50LWNvbG9yOmhvdmVyKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItYmFzZSl9Omhvc3QoLmluLXNlZ21lbnQtY29sb3Iuc2VnbWVudC1idXR0b24tY2hlY2tlZDpob3ZlcikgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6dmFyKC0taW9uLWNvbG9yLWJhc2UpfX06aG9zdCguaW4tdG9vbGJhcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKXstLWJhY2tncm91bmQ6dmFyKC0taW9uLXRvb2xiYXItc2VnbWVudC1iYWNrZ3JvdW5kLCBub25lKTstLWJhY2tncm91bmQtY2hlY2tlZDp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWJhY2tncm91bmQtY2hlY2tlZCwgbm9uZSk7LS1jb2xvcjp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWNvbG9yLCByZ2JhKHZhcigtLWlvbi10ZXh0LWNvbG9yLXJnYiwgMCwgMCwgMCksIDAuNikpOy0tY29sb3ItY2hlY2tlZDp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWNvbG9yLWNoZWNrZWQsIHZhcigtLWlvbi1jb2xvci1wcmltYXJ5LCAjMzg4MGZmKSk7LS1pbmRpY2F0b3ItY29sb3I6dmFyKC0taW9uLXRvb2xiYXItc2VnbWVudC1jb2xvci1jaGVja2VkLCB2YXIoLS1jb2xvci1jaGVja2VkKSl9Omhvc3QoLmluLXRvb2xiYXItY29sb3I6bm90KC5pbi1zZWdtZW50LWNvbG9yKSkgLmJ1dHRvbi1uYXRpdmV7Y29sb3I6cmdiYSh2YXIoLS1pb24tY29sb3ItY29udHJhc3QtcmdiKSwgMC42KX06aG9zdCguaW4tdG9vbGJhci1jb2xvci5zZWdtZW50LWJ1dHRvbi1jaGVja2VkOm5vdCguaW4tc2VnbWVudC1jb2xvcikpIC5idXR0b24tbmF0aXZle2NvbG9yOnZhcigtLWlvbi1jb2xvci1jb250cmFzdCl9QG1lZGlhIChhbnktaG92ZXI6IGhvdmVyKXs6aG9zdCguaW4tdG9vbGJhci1jb2xvcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuYnV0dG9uLW5hdGl2ZTo6YWZ0ZXJ7YmFja2dyb3VuZDp2YXIoLS1pb24tY29sb3ItY29udHJhc3QpfX06OnNsb3R0ZWQoaW9uLWljb24pe21hcmdpbi10b3A6MTJweDttYXJnaW4tYm90dG9tOjEycHg7Zm9udC1zaXplOjI0cHh9OjpzbG90dGVkKGlvbi1sYWJlbCl7bWFyZ2luLXRvcDoxMnB4O21hcmdpbi1ib3R0b206MTJweH06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tdG9wKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKSw6aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tYm90dG9tKSA6OnNsb3R0ZWQoaW9uLWljb24pe21hcmdpbi10b3A6MH06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tdG9wKSA6OnNsb3R0ZWQoaW9uLWljb24pLDpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1ib3R0b20pIDo6c2xvdHRlZChpb24tbGFiZWwpe21hcmdpbi1ib3R0b206MH06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tc3RhcnQpIDo6c2xvdHRlZChpb24tbGFiZWwpe21hcmdpbi1sZWZ0OjhweDttYXJnaW4tcmlnaHQ6MH1Ac3VwcG9ydHMgKCgtd2Via2l0LW1hcmdpbi1zdGFydDogMCkgb3IgKG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDApKSBvciAoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApezpob3N0KC5zZWdtZW50LWJ1dHRvbi1sYXlvdXQtaWNvbi1zdGFydCkgOjpzbG90dGVkKGlvbi1sYWJlbCl7bWFyZ2luLWxlZnQ6dW5zZXQ7bWFyZ2luLXJpZ2h0OnVuc2V0Oy13ZWJraXQtbWFyZ2luLXN0YXJ0OjhweDttYXJnaW4taW5saW5lLXN0YXJ0OjhweDstd2Via2l0LW1hcmdpbi1lbmQ6MDttYXJnaW4taW5saW5lLWVuZDowfX06aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tZW5kKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDo4cHh9QHN1cHBvcnRzICgoLXdlYmtpdC1tYXJnaW4tc3RhcnQ6IDApIG9yIChtYXJnaW4taW5saW5lLXN0YXJ0OiAwKSkgb3IgKC13ZWJraXQtbWFyZ2luLXN0YXJ0OiAwKXs6aG9zdCguc2VnbWVudC1idXR0b24tbGF5b3V0LWljb24tZW5kKSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXttYXJnaW4tbGVmdDp1bnNldDttYXJnaW4tcmlnaHQ6dW5zZXQ7LXdlYmtpdC1tYXJnaW4tc3RhcnQ6MDttYXJnaW4taW5saW5lLXN0YXJ0OjA7LXdlYmtpdC1tYXJnaW4tZW5kOjhweDttYXJnaW4taW5saW5lLWVuZDo4cHh9fTpob3N0KC5zZWdtZW50LWJ1dHRvbi1oYXMtaWNvbi1vbmx5KSA6OnNsb3R0ZWQoaW9uLWljb24pe21hcmdpbi10b3A6MTJweDttYXJnaW4tYm90dG9tOjEycHh9Omhvc3QoLnNlZ21lbnQtYnV0dG9uLWhhcy1sYWJlbC1vbmx5KSA6OnNsb3R0ZWQoaW9uLWxhYmVsKXttYXJnaW4tdG9wOjEycHg7bWFyZ2luLWJvdHRvbToxMnB4fS5zZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3J7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjB9LnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5ke2JhY2tncm91bmQ6dmFyKC0taW5kaWNhdG9yLWNvbG9yKX06aG9zdCguaW4tdG9vbGJhcjpub3QoLmluLXNlZ21lbnQtY29sb3IpKSAuc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWJhY2tncm91bmR7YmFja2dyb3VuZDp2YXIoLS1pb24tdG9vbGJhci1zZWdtZW50LWluZGljYXRvci1jb2xvciwgdmFyKC0taW5kaWNhdG9yLWNvbG9yKSl9Omhvc3QoLmluLXRvb2xiYXItY29sb3I6bm90KC5pbi1zZWdtZW50LWNvbG9yKSkgLnNlZ21lbnQtYnV0dG9uLWluZGljYXRvci1iYWNrZ3JvdW5ke2JhY2tncm91bmQ6dmFyKC0taW9uLWNvbG9yLWNvbnRyYXN0KX1cIjtcblxubGV0IGlkcyA9IDA7XG5sZXQgU2VnbWVudEJ1dHRvbiA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoaG9zdFJlZikge1xuICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgaG9zdFJlZik7XG4gICAgdGhpcy5zZWdtZW50RWwgPSBudWxsO1xuICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIElmIGB0cnVlYCwgdGhlIHVzZXIgY2Fubm90IGludGVyYWN0IHdpdGggdGhlIHNlZ21lbnQgYnV0dG9uLlxuICAgICAqL1xuICAgIHRoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGxheW91dCBvZiB0aGUgdGV4dCBhbmQgaWNvbiBpbiB0aGUgc2VnbWVudC5cbiAgICAgKi9cbiAgICB0aGlzLmxheW91dCA9ICdpY29uLXRvcCc7XG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgdGhlIGJ1dHRvbi5cbiAgICAgKi9cbiAgICB0aGlzLnR5cGUgPSAnYnV0dG9uJztcbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIHNlZ21lbnQgYnV0dG9uLlxuICAgICAqL1xuICAgIHRoaXMudmFsdWUgPSAnaW9uLXNiLScgKyAoaWRzKyspO1xuICAgIHRoaXMudXBkYXRlU3R5bGUgPSAoKSA9PiB7XG4gICAgICBmb3JjZVVwZGF0ZSh0aGlzKTtcbiAgICB9O1xuICAgIHRoaXMudXBkYXRlU3RhdGUgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5zZWdtZW50RWwpIHtcbiAgICAgICAgdGhpcy5jaGVja2VkID0gdGhpcy5zZWdtZW50RWwudmFsdWUgPT09IHRoaXMudmFsdWU7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBjb25zdCBzZWdtZW50RWwgPSB0aGlzLnNlZ21lbnRFbCA9IHRoaXMuZWwuY2xvc2VzdCgnaW9uLXNlZ21lbnQnKTtcbiAgICBpZiAoc2VnbWVudEVsKSB7XG4gICAgICB0aGlzLnVwZGF0ZVN0YXRlKCk7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHNlZ21lbnRFbCwgJ2lvblNlbGVjdCcsIHRoaXMudXBkYXRlU3RhdGUpO1xuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihzZWdtZW50RWwsICdpb25TdHlsZScsIHRoaXMudXBkYXRlU3R5bGUpO1xuICAgIH1cbiAgfVxuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBjb25zdCBzZWdtZW50RWwgPSB0aGlzLnNlZ21lbnRFbDtcbiAgICBpZiAoc2VnbWVudEVsKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHNlZ21lbnRFbCwgJ2lvblNlbGVjdCcsIHRoaXMudXBkYXRlU3RhdGUpO1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihzZWdtZW50RWwsICdpb25TdHlsZScsIHRoaXMudXBkYXRlU3R5bGUpO1xuICAgICAgdGhpcy5zZWdtZW50RWwgPSBudWxsO1xuICAgIH1cbiAgfVxuICBnZXQgaGFzTGFiZWwoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5lbC5xdWVyeVNlbGVjdG9yKCdpb24tbGFiZWwnKTtcbiAgfVxuICBnZXQgaGFzSWNvbigpIHtcbiAgICByZXR1cm4gISF0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1pY29uJyk7XG4gIH1cbiAgZ2V0IHRhYkluZGV4KCkge1xuICAgIHJldHVybiB0aGlzLmNoZWNrZWQgJiYgIXRoaXMuZGlzYWJsZWQgPyAwIDogLTE7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgY2hlY2tlZCwgdHlwZSwgZGlzYWJsZWQsIGhhc0ljb24sIGhhc0xhYmVsLCBsYXlvdXQsIHNlZ21lbnRFbCwgdGFiSW5kZXggfSA9IHRoaXM7XG4gICAgY29uc3QgbW9kZSA9IGdldElvbk1vZGUodGhpcyk7XG4gICAgY29uc3QgaGFzU2VnbWVudENvbG9yID0gKCkgPT4gc2VnbWVudEVsICE9PSBudWxsICYmIHNlZ21lbnRFbC5jb2xvciAhPT0gdW5kZWZpbmVkO1xuICAgIHJldHVybiAoaChIb3N0LCB7IHJvbGU6IFwidGFiXCIsIFwiYXJpYS1zZWxlY3RlZFwiOiBjaGVja2VkID8gJ3RydWUnIDogJ2ZhbHNlJywgXCJhcmlhLWRpc2FibGVkXCI6IGRpc2FibGVkID8gJ3RydWUnIDogbnVsbCwgdGFiSW5kZXg6IHRhYkluZGV4LCBjbGFzczoge1xuICAgICAgICBbbW9kZV06IHRydWUsXG4gICAgICAgICdpbi10b29sYmFyJzogaG9zdENvbnRleHQoJ2lvbi10b29sYmFyJywgdGhpcy5lbCksXG4gICAgICAgICdpbi10b29sYmFyLWNvbG9yJzogaG9zdENvbnRleHQoJ2lvbi10b29sYmFyW2NvbG9yXScsIHRoaXMuZWwpLFxuICAgICAgICAnaW4tc2VnbWVudCc6IGhvc3RDb250ZXh0KCdpb24tc2VnbWVudCcsIHRoaXMuZWwpLFxuICAgICAgICAnaW4tc2VnbWVudC1jb2xvcic6IGhhc1NlZ21lbnRDb2xvcigpLFxuICAgICAgICAnc2VnbWVudC1idXR0b24taGFzLWxhYmVsJzogaGFzTGFiZWwsXG4gICAgICAgICdzZWdtZW50LWJ1dHRvbi1oYXMtaWNvbic6IGhhc0ljb24sXG4gICAgICAgICdzZWdtZW50LWJ1dHRvbi1oYXMtbGFiZWwtb25seSc6IGhhc0xhYmVsICYmICFoYXNJY29uLFxuICAgICAgICAnc2VnbWVudC1idXR0b24taGFzLWljb24tb25seSc6IGhhc0ljb24gJiYgIWhhc0xhYmVsLFxuICAgICAgICAnc2VnbWVudC1idXR0b24tZGlzYWJsZWQnOiBkaXNhYmxlZCxcbiAgICAgICAgJ3NlZ21lbnQtYnV0dG9uLWNoZWNrZWQnOiBjaGVja2VkLFxuICAgICAgICBbYHNlZ21lbnQtYnV0dG9uLWxheW91dC0ke2xheW91dH1gXTogdHJ1ZSxcbiAgICAgICAgJ2lvbi1hY3RpdmF0YWJsZSc6IHRydWUsXG4gICAgICAgICdpb24tYWN0aXZhdGFibGUtaW5zdGFudCc6IHRydWUsXG4gICAgICAgICdpb24tZm9jdXNhYmxlJzogdHJ1ZSxcbiAgICAgIH0gfSwgaChcImJ1dHRvblwiLCB7IHR5cGU6IHR5cGUsIHRhYkluZGV4OiAtMSwgY2xhc3M6IFwiYnV0dG9uLW5hdGl2ZVwiLCBwYXJ0OiBcIm5hdGl2ZVwiLCBkaXNhYmxlZDogZGlzYWJsZWQgfSwgaChcInNwYW5cIiwgeyBjbGFzczogXCJidXR0b24taW5uZXJcIiB9LCBoKFwic2xvdFwiLCBudWxsKSksIG1vZGUgPT09ICdtZCcgJiYgaChcImlvbi1yaXBwbGUtZWZmZWN0XCIsIG51bGwpKSwgaChcImRpdlwiLCB7IHBhcnQ6IFwiaW5kaWNhdG9yXCIsIGNsYXNzOiB7XG4gICAgICAgICdzZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3InOiB0cnVlLFxuICAgICAgICAnc2VnbWVudC1idXR0b24taW5kaWNhdG9yLWFuaW1hdGVkJzogdHJ1ZVxuICAgICAgfSB9LCBoKFwiZGl2XCIsIHsgcGFydDogXCJpbmRpY2F0b3ItYmFja2dyb3VuZFwiLCBjbGFzczogXCJzZWdtZW50LWJ1dHRvbi1pbmRpY2F0b3ItYmFja2dyb3VuZFwiIH0pKSkpO1xuICB9XG4gIGdldCBlbCgpIHsgcmV0dXJuIGdldEVsZW1lbnQodGhpcyk7IH1cbn07XG5TZWdtZW50QnV0dG9uLnN0eWxlID0ge1xuICBpb3M6IHNlZ21lbnRCdXR0b25Jb3NDc3MsXG4gIG1kOiBzZWdtZW50QnV0dG9uTWRDc3Ncbn07XG5cbmV4cG9ydCB7IFNlZ21lbnQgYXMgaW9uX3NlZ21lbnQsIFNlZ21lbnRCdXR0b24gYXMgaW9uX3NlZ21lbnRfYnV0dG9uIH07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=